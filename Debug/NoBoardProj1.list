
NoBoardProj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002198  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080022d4  080022d4  000122d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002360  08002360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08002368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000138  20000068  080023d0  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001a0  080023d0  000201a0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   000125f8  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002476  00000000  00000000  00032689  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006021  00000000  00000000  00034aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006f8  00000000  00000000  0003ab20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cd8  00000000  00000000  0003b218  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000047ef  00000000  00000000  0003bef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ff3  00000000  00000000  000406df  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000436d2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000147c  00000000  00000000  00043750  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000068 	.word	0x20000068
 8000158:	00000000 	.word	0x00000000
 800015c:	080022bc 	.word	0x080022bc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000006c 	.word	0x2000006c
 8000178:	080022bc 	.word	0x080022bc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <HAL_InitTick+0x24>)
{
 800018e:	b510      	push	{r4, lr}
 8000190:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000192:	6818      	ldr	r0, [r3, #0]
 8000194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000198:	fbb0 f0f3 	udiv	r0, r0, r3
 800019c:	f000 f884 	bl	80002a8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001a0:	2200      	movs	r2, #0
 80001a2:	4621      	mov	r1, r4
 80001a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001a8:	f000 f83e 	bl	8000228 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001ac:	2000      	movs	r0, #0
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000

080001b4 <HAL_Init>:
{
 80001b4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b6:	2003      	movs	r0, #3
 80001b8:	f000 f824 	bl	8000204 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001bc:	2000      	movs	r0, #0
 80001be:	f7ff ffe5 	bl	800018c <HAL_InitTick>
  HAL_MspInit();
 80001c2:	f001 fea3 	bl	8001f0c <HAL_MspInit>
}
 80001c6:	2000      	movs	r0, #0
 80001c8:	bd08      	pop	{r3, pc}
	...

080001cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001cc:	4a02      	ldr	r2, [pc, #8]	; (80001d8 <HAL_IncTick+0xc>)
 80001ce:	6813      	ldr	r3, [r2, #0]
 80001d0:	3301      	adds	r3, #1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000a0 	.word	0x200000a0

080001dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001dc:	4b01      	ldr	r3, [pc, #4]	; (80001e4 <HAL_GetTick+0x8>)
 80001de:	6818      	ldr	r0, [r3, #0]
}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	200000a0 	.word	0x200000a0

080001e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001e8:	b513      	push	{r0, r1, r4, lr}
 80001ea:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001ec:	f7ff fff6 	bl	80001dc <HAL_GetTick>
 80001f0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001f2:	f7ff fff3 	bl	80001dc <HAL_GetTick>
 80001f6:	9b01      	ldr	r3, [sp, #4]
 80001f8:	1b00      	subs	r0, r0, r4
 80001fa:	4298      	cmp	r0, r3
 80001fc:	d3f9      	bcc.n	80001f2 <HAL_Delay+0xa>
  {
  }
}
 80001fe:	b002      	add	sp, #8
 8000200:	bd10      	pop	{r4, pc}
	...

08000204 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000208:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800020a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000212:	041b      	lsls	r3, r3, #16
 8000214:	0c1b      	lsrs	r3, r3, #16
 8000216:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800021a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000220:	60d3      	str	r3, [r2, #12]
 8000222:	4770      	bx	lr
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800022a:	b530      	push	{r4, r5, lr}
 800022c:	68dc      	ldr	r4, [r3, #12]
 800022e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000232:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000236:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000238:	2b04      	cmp	r3, #4
 800023a:	bf28      	it	cs
 800023c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000240:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000244:	bf98      	it	ls
 8000246:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000248:	fa05 f303 	lsl.w	r3, r5, r3
 800024c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf88      	it	hi
 8000252:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	4019      	ands	r1, r3
 8000256:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000258:	fa05 f404 	lsl.w	r4, r5, r4
 800025c:	3c01      	subs	r4, #1
 800025e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000260:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000262:	ea42 0201 	orr.w	r2, r2, r1
 8000266:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026a:	bfaf      	iteee	ge
 800026c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	4b06      	ldrlt	r3, [pc, #24]	; (800028c <HAL_NVIC_SetPriority+0x64>)
 8000272:	f000 000f 	andlt.w	r0, r0, #15
 8000276:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	bfa5      	ittet	ge
 800027a:	b2d2      	uxtbge	r2, r2
 800027c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000282:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000286:	bd30      	pop	{r4, r5, pc}
 8000288:	e000ed00 	.word	0xe000ed00
 800028c:	e000ed14 	.word	0xe000ed14

08000290 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000290:	2301      	movs	r3, #1
 8000292:	0942      	lsrs	r2, r0, #5
 8000294:	f000 001f 	and.w	r0, r0, #31
 8000298:	fa03 f000 	lsl.w	r0, r3, r0
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_NVIC_EnableIRQ+0x14>)
 800029e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002a2:	4770      	bx	lr
 80002a4:	e000e100 	.word	0xe000e100

080002a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a8:	3801      	subs	r0, #1
 80002aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ae:	d20a      	bcs.n	80002c6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e010 	.word	0xe000e010
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80002d4:	2300      	movs	r3, #0
{ 
 80002d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80002da:	4a62      	ldr	r2, [pc, #392]	; (8000464 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80002dc:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002e0:	f8df 9188 	ldr.w	r9, [pc, #392]	; 800046c <HAL_GPIO_Init+0x198>
{ 
 80002e4:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80002e6:	fa38 f403 	lsrs.w	r4, r8, r3
 80002ea:	d102      	bne.n	80002f2 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 80002ec:	b005      	add	sp, #20
 80002ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002f2:	2401      	movs	r4, #1
 80002f4:	409c      	lsls	r4, r3
    if(iocurrent)
 80002f6:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002fa:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 80002fc:	f000 80a7 	beq.w	800044e <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000300:	684c      	ldr	r4, [r1, #4]
 8000302:	f024 0a10 	bic.w	sl, r4, #16
 8000306:	f1ba 0f02 	cmp.w	sl, #2
 800030a:	d116      	bne.n	800033a <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800030c:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8000310:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000314:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000318:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800031c:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000320:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000324:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000328:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 800032c:	690d      	ldr	r5, [r1, #16]
 800032e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000332:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 8000336:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800033a:	2503      	movs	r5, #3
 800033c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000340:	fa05 f50c 	lsl.w	r5, r5, ip
 8000344:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000346:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800034a:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800034e:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000352:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000356:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800035a:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800035e:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000362:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000366:	d816      	bhi.n	8000396 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 8000368:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800036c:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800036e:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000372:	fa07 fa0c 	lsl.w	sl, r7, ip
 8000376:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800037a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800037e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000382:	9f01      	ldr	r7, [sp, #4]
 8000384:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000388:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800038c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000390:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000394:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000396:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000398:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800039a:	688f      	ldr	r7, [r1, #8]
 800039c:	fa07 f70c 	lsl.w	r7, r7, ip
 80003a0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003a2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003a4:	00e5      	lsls	r5, r4, #3
 80003a6:	d552      	bpl.n	800044e <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003a8:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ac:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80003b0:	f023 0703 	bic.w	r7, r3, #3
 80003b4:	f045 0501 	orr.w	r5, r5, #1
 80003b8:	f8c9 5020 	str.w	r5, [r9, #32]
 80003bc:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80003c0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80003c4:	f005 0501 	and.w	r5, r5, #1
 80003c8:	9503      	str	r5, [sp, #12]
 80003ca:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003ce:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d2:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003d4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80003d8:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003da:	fa0e fe0c 	lsl.w	lr, lr, ip
 80003de:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003e2:	4d21      	ldr	r5, [pc, #132]	; (8000468 <HAL_GPIO_Init+0x194>)
 80003e4:	42a8      	cmp	r0, r5
 80003e6:	d034      	beq.n	8000452 <HAL_GPIO_Init+0x17e>
 80003e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ec:	42a8      	cmp	r0, r5
 80003ee:	d032      	beq.n	8000456 <HAL_GPIO_Init+0x182>
 80003f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003f4:	42a8      	cmp	r0, r5
 80003f6:	d030      	beq.n	800045a <HAL_GPIO_Init+0x186>
 80003f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	d02e      	beq.n	800045e <HAL_GPIO_Init+0x18a>
 8000400:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000404:	42a8      	cmp	r0, r5
 8000406:	bf14      	ite	ne
 8000408:	2505      	movne	r5, #5
 800040a:	2504      	moveq	r5, #4
 800040c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000410:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000414:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000416:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000418:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800041a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800041e:	bf0c      	ite	eq
 8000420:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000422:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000424:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000426:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000428:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800042c:	bf0c      	ite	eq
 800042e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000430:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000432:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000434:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000436:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800043a:	bf0c      	ite	eq
 800043c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800043e:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000440:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000442:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000444:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000446:	bf54      	ite	pl
 8000448:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 800044a:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800044c:	60d5      	str	r5, [r2, #12]
    position++;
 800044e:	3301      	adds	r3, #1
 8000450:	e749      	b.n	80002e6 <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000452:	2500      	movs	r5, #0
 8000454:	e7da      	b.n	800040c <HAL_GPIO_Init+0x138>
 8000456:	2501      	movs	r5, #1
 8000458:	e7d8      	b.n	800040c <HAL_GPIO_Init+0x138>
 800045a:	2502      	movs	r5, #2
 800045c:	e7d6      	b.n	800040c <HAL_GPIO_Init+0x138>
 800045e:	2503      	movs	r5, #3
 8000460:	e7d4      	b.n	800040c <HAL_GPIO_Init+0x138>
 8000462:	bf00      	nop
 8000464:	40010400 	.word	0x40010400
 8000468:	40020000 	.word	0x40020000
 800046c:	40023800 	.word	0x40023800

08000470 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000470:	b10a      	cbz	r2, 8000476 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000472:	6181      	str	r1, [r0, #24]
 8000474:	4770      	bx	lr
 8000476:	0409      	lsls	r1, r1, #16
 8000478:	e7fb      	b.n	8000472 <HAL_GPIO_WritePin+0x2>

0800047a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800047a:	6943      	ldr	r3, [r0, #20]
 800047c:	4059      	eors	r1, r3
 800047e:	6141      	str	r1, [r0, #20]
 8000480:	4770      	bx	lr
	...

08000484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000484:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000486:	4b04      	ldr	r3, [pc, #16]	; (8000498 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000488:	6959      	ldr	r1, [r3, #20]
 800048a:	4201      	tst	r1, r0
 800048c:	d002      	beq.n	8000494 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800048e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000490:	f000 ffb8 	bl	8001404 <HAL_GPIO_EXTI_Callback>
 8000494:	bd08      	pop	{r3, pc}
 8000496:	bf00      	nop
 8000498:	40010400 	.word	0x40010400

0800049c <HAL_LCD_Write>:
  * @param  RAMRegisterMask: specifies the LCD RAM Register Data Mask.
  * @param  Data: specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 800049c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004a0:	461d      	mov	r5, r3
  uint32_t tickstart = 0x00; 
  
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 80004a2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 80004a6:	4604      	mov	r4, r0
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 80004a8:	2b01      	cmp	r3, #1
{
 80004aa:	460f      	mov	r7, r1
 80004ac:	4616      	mov	r6, r2
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 80004ae:	d003      	beq.n	80004b8 <HAL_LCD_Write+0x1c>
 80004b0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d12d      	bne.n	8000514 <HAL_LCD_Write+0x78>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));
    
    if(hlcd->State == HAL_LCD_STATE_READY)
 80004b8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d009      	beq.n	80004d6 <HAL_LCD_Write+0x3a>
 80004c2:	6821      	ldr	r1, [r4, #0]
    }
    
    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);

    return HAL_OK;
 80004c4:	2000      	movs	r0, #0
 80004c6:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 80004ca:	694b      	ldr	r3, [r1, #20]
 80004cc:	4033      	ands	r3, r6
 80004ce:	432b      	orrs	r3, r5
 80004d0:	614b      	str	r3, [r1, #20]
    return HAL_OK;
 80004d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_LOCK(hlcd);
 80004d6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80004da:	2002      	movs	r0, #2
 80004dc:	2a01      	cmp	r2, #1
 80004de:	d01a      	beq.n	8000516 <HAL_LCD_Write+0x7a>
 80004e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 80004e4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      tickstart = HAL_GetTick();
 80004e8:	f7ff fe78 	bl	80001dc <HAL_GetTick>
 80004ec:	4680      	mov	r8, r0
      while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80004ee:	6823      	ldr	r3, [r4, #0]
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	075b      	lsls	r3, r3, #29
 80004f4:	d5e5      	bpl.n	80004c2 <HAL_LCD_Write+0x26>
        if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 80004f6:	f7ff fe71 	bl	80001dc <HAL_GetTick>
 80004fa:	eba0 0008 	sub.w	r0, r0, r8
 80004fe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000502:	d9f4      	bls.n	80004ee <HAL_LCD_Write+0x52>
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8000504:	2302      	movs	r3, #2
 8000506:	63a3      	str	r3, [r4, #56]	; 0x38
          __HAL_UNLOCK(hlcd);
 8000508:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800050a:	2003      	movs	r0, #3
          __HAL_UNLOCK(hlcd);
 800050c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8000510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else
  {
    return HAL_ERROR;
 8000514:	2001      	movs	r0, #1
  }
}
 8000516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800051a <HAL_LCD_UpdateDisplayRequest>:
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
  uint32_t tickstart = 0x00;
  
  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800051a:	2208      	movs	r2, #8
 800051c:	6803      	ldr	r3, [r0, #0]
{
 800051e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8000520:	60da      	str	r2, [r3, #12]
  
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8000522:	689a      	ldr	r2, [r3, #8]
{
 8000524:	4604      	mov	r4, r0
  hlcd->Instance->SR |= LCD_SR_UDR;
 8000526:	f042 0204 	orr.w	r2, r2, #4
 800052a:	609a      	str	r2, [r3, #8]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 800052c:	f7ff fe56 	bl	80001dc <HAL_GetTick>
 8000530:	4606      	mov	r6, r0
  
  /*!< Wait Until the LCD display is done */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000532:	6823      	ldr	r3, [r4, #0]
 8000534:	689d      	ldr	r5, [r3, #8]
 8000536:	f015 0508 	ands.w	r5, r5, #8
 800053a:	d006      	beq.n	800054a <HAL_LCD_UpdateDisplayRequest+0x30>
  
      return HAL_TIMEOUT;
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 800053c:	2301      	movs	r3, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 800053e:	2000      	movs	r0, #0
  hlcd->State = HAL_LCD_STATE_READY;
 8000540:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hlcd);
 8000544:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  
  return HAL_OK;
}
 8000548:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 800054a:	f7ff fe47 	bl	80001dc <HAL_GetTick>
 800054e:	1b80      	subs	r0, r0, r6
 8000550:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000554:	d9ed      	bls.n	8000532 <HAL_LCD_UpdateDisplayRequest+0x18>
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8000556:	2304      	movs	r3, #4
      __HAL_UNLOCK(hlcd);
 8000558:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 800055c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 800055e:	2003      	movs	r0, #3
 8000560:	bd70      	pop	{r4, r5, r6, pc}

08000562 <HAL_LCD_Clear>:
{
 8000562:	b538      	push	{r3, r4, r5, lr}
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 8000564:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 8000568:	4604      	mov	r4, r0
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 800056a:	2b01      	cmp	r3, #1
 800056c:	d003      	beq.n	8000576 <HAL_LCD_Clear+0x14>
 800056e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000572:	2b02      	cmp	r3, #2
 8000574:	d12b      	bne.n	80005ce <HAL_LCD_Clear+0x6c>
    __HAL_LOCK(hlcd);
 8000576:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800057a:	2002      	movs	r0, #2
 800057c:	2b01      	cmp	r3, #1
 800057e:	d027      	beq.n	80005d0 <HAL_LCD_Clear+0x6e>
 8000580:	2301      	movs	r3, #1
    hlcd->State = HAL_LCD_STATE_BUSY;
 8000582:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_LOCK(hlcd);
 8000586:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    tickstart = HAL_GetTick();
 800058a:	f7ff fe27 	bl	80001dc <HAL_GetTick>
 800058e:	4605      	mov	r5, r0
    while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000590:	6821      	ldr	r1, [r4, #0]
 8000592:	688b      	ldr	r3, [r1, #8]
 8000594:	f013 0304 	ands.w	r3, r3, #4
 8000598:	d10c      	bne.n	80005b4 <HAL_LCD_Clear+0x52>
      hlcd->Instance->RAM[counter] = 0;
 800059a:	4618      	mov	r0, r3
 800059c:	1d1a      	adds	r2, r3, #4
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800059e:	3301      	adds	r3, #1
      hlcd->Instance->RAM[counter] = 0;
 80005a0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80005a4:	2b10      	cmp	r3, #16
      hlcd->Instance->RAM[counter] = 0;
 80005a6:	6050      	str	r0, [r2, #4]
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80005a8:	d1f8      	bne.n	800059c <HAL_LCD_Clear+0x3a>
    HAL_LCD_UpdateDisplayRequest(hlcd);     
 80005aa:	4620      	mov	r0, r4
 80005ac:	f7ff ffb5 	bl	800051a <HAL_LCD_UpdateDisplayRequest>
    return HAL_OK;
 80005b0:	2000      	movs	r0, #0
 80005b2:	bd38      	pop	{r3, r4, r5, pc}
      if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 80005b4:	f7ff fe12 	bl	80001dc <HAL_GetTick>
 80005b8:	1b40      	subs	r0, r0, r5
 80005ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80005be:	d9e7      	bls.n	8000590 <HAL_LCD_Clear+0x2e>
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 80005c0:	2302      	movs	r3, #2
 80005c2:	63a3      	str	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hlcd);
 80005c4:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80005c6:	2003      	movs	r0, #3
        __HAL_UNLOCK(hlcd);
 80005c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80005cc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005ce:	2001      	movs	r0, #1
}
 80005d0:	bd38      	pop	{r3, r4, r5, pc}

080005d2 <LCD_WaitForSynchro>:
  * @brief  Waits until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 80005d2:	b538      	push	{r3, r4, r5, lr}
 80005d4:	4604      	mov	r4, r0
  uint32_t tickstart = 0x00; 
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 80005d6:	f7ff fe01 	bl	80001dc <HAL_GetTick>
 80005da:	4605      	mov	r5, r0

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80005dc:	6823      	ldr	r3, [r4, #0]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	069b      	lsls	r3, r3, #26
 80005e2:	d501      	bpl.n	80005e8 <LCD_WaitForSynchro+0x16>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80005e4:	2000      	movs	r0, #0
}
 80005e6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 80005e8:	f7ff fdf8 	bl	80001dc <HAL_GetTick>
 80005ec:	1b40      	subs	r0, r0, r5
 80005ee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80005f2:	d9f3      	bls.n	80005dc <LCD_WaitForSynchro+0xa>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 80005f4:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80005f6:	2003      	movs	r0, #3
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 80005f8:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 80005fa:	bd38      	pop	{r3, r4, r5, pc}

080005fc <HAL_LCD_Init>:
{
 80005fc:	b538      	push	{r3, r4, r5, lr}
  if(hlcd == NULL)
 80005fe:	4604      	mov	r4, r0
 8000600:	2800      	cmp	r0, #0
 8000602:	d06b      	beq.n	80006dc <HAL_LCD_Init+0xe0>
  if(hlcd->State == HAL_LCD_STATE_RESET)
 8000604:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000608:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800060c:	b91b      	cbnz	r3, 8000616 <HAL_LCD_Init+0x1a>
    hlcd->Lock = HAL_UNLOCKED;
 800060e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_LCD_MspInit(hlcd);
 8000612:	f001 fc9d 	bl	8001f50 <HAL_LCD_MspInit>
  hlcd->State = HAL_LCD_STATE_BUSY;
 8000616:	2302      	movs	r3, #2
  __HAL_LCD_DISABLE(hlcd);
 8000618:	6822      	ldr	r2, [r4, #0]
  hlcd->State = HAL_LCD_STATE_BUSY;
 800061a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_LCD_DISABLE(hlcd);
 800061e:	6813      	ldr	r3, [r2, #0]
 8000620:	f023 0301 	bic.w	r3, r3, #1
 8000624:	6013      	str	r3, [r2, #0]
 8000626:	2300      	movs	r3, #0
    hlcd->Instance->RAM[counter] = 0;
 8000628:	4618      	mov	r0, r3
 800062a:	1d19      	adds	r1, r3, #4
 800062c:	3301      	adds	r3, #1
 800062e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000632:	2b10      	cmp	r3, #16
    hlcd->Instance->RAM[counter] = 0;
 8000634:	6048      	str	r0, [r1, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000636:	d1f8      	bne.n	800062a <HAL_LCD_Init+0x2e>
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 8000638:	6893      	ldr	r3, [r2, #8]
   MODIFY_REG(hlcd->Instance->FCR, \
 800063a:	68a1      	ldr	r1, [r4, #8]
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	6093      	str	r3, [r2, #8]
   MODIFY_REG(hlcd->Instance->FCR, \
 8000642:	6863      	ldr	r3, [r4, #4]
 8000644:	6850      	ldr	r0, [r2, #4]
 8000646:	430b      	orrs	r3, r1
 8000648:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800064a:	430b      	orrs	r3, r1
 800064c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800064e:	430b      	orrs	r3, r1
 8000650:	69e1      	ldr	r1, [r4, #28]
 8000652:	430b      	orrs	r3, r1
 8000654:	6a21      	ldr	r1, [r4, #32]
 8000656:	430b      	orrs	r3, r1
 8000658:	69a1      	ldr	r1, [r4, #24]
 800065a:	430b      	orrs	r3, r1
 800065c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800065e:	430b      	orrs	r3, r1
 8000660:	491f      	ldr	r1, [pc, #124]	; (80006e0 <HAL_LCD_Init+0xe4>)
 8000662:	4001      	ands	r1, r0
 8000664:	430b      	orrs	r3, r1
 8000666:	6053      	str	r3, [r2, #4]
  LCD_WaitForSynchro(hlcd);
 8000668:	4620      	mov	r0, r4
 800066a:	f7ff ffb2 	bl	80005d2 <LCD_WaitForSynchro>
  MODIFY_REG(hlcd->Instance->CR, \
 800066e:	6920      	ldr	r0, [r4, #16]
 8000670:	68e3      	ldr	r3, [r4, #12]
 8000672:	6822      	ldr	r2, [r4, #0]
 8000674:	4303      	orrs	r3, r0
 8000676:	6960      	ldr	r0, [r4, #20]
 8000678:	6811      	ldr	r1, [r2, #0]
 800067a:	4303      	orrs	r3, r0
 800067c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800067e:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
 8000682:	4303      	orrs	r3, r0
 8000684:	430b      	orrs	r3, r1
 8000686:	6013      	str	r3, [r2, #0]
  __HAL_LCD_ENABLE(hlcd);
 8000688:	6813      	ldr	r3, [r2, #0]
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000690:	f7ff fda4 	bl	80001dc <HAL_GetTick>
 8000694:	4605      	mov	r5, r0
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000696:	6823      	ldr	r3, [r4, #0]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	07da      	lsls	r2, r3, #31
 800069c:	d50c      	bpl.n	80006b8 <HAL_LCD_Init+0xbc>
  tickstart = HAL_GetTick();
 800069e:	f7ff fd9d 	bl	80001dc <HAL_GetTick>
 80006a2:	4605      	mov	r5, r0
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80006a4:	6823      	ldr	r3, [r4, #0]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	06db      	lsls	r3, r3, #27
 80006aa:	d50f      	bpl.n	80006cc <HAL_LCD_Init+0xd0>
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80006ac:	2000      	movs	r0, #0
  hlcd->State= HAL_LCD_STATE_READY;
 80006ae:	2301      	movs	r3, #1
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80006b0:	63a0      	str	r0, [r4, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 80006b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80006b6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 80006b8:	f7ff fd90 	bl	80001dc <HAL_GetTick>
 80006bc:	1b40      	subs	r0, r0, r5
 80006be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80006c2:	d9e8      	bls.n	8000696 <HAL_LCD_Init+0x9a>
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;     
 80006c4:	2308      	movs	r3, #8
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;  
 80006c6:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 80006c8:	2003      	movs	r0, #3
 80006ca:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 80006cc:	f7ff fd86 	bl	80001dc <HAL_GetTick>
 80006d0:	1b40      	subs	r0, r0, r5
 80006d2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80006d6:	d9e5      	bls.n	80006a4 <HAL_LCD_Init+0xa8>
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;  
 80006d8:	2310      	movs	r3, #16
 80006da:	e7f4      	b.n	80006c6 <HAL_LCD_Init+0xca>
    return HAL_ERROR;
 80006dc:	2001      	movs	r0, #1
}
 80006de:	bd38      	pop	{r3, r4, r5, pc}
 80006e0:	fc00000f 	.word	0xfc00000f

080006e4 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 80006e6:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80006e8:	689a      	ldr	r2, [r3, #8]
 80006ea:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80006ee:	d00c      	beq.n	800070a <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 80006f0:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 80006f2:	491a      	ldr	r1, [pc, #104]	; (800075c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80006f4:	680b      	ldr	r3, [r1, #0]
 80006f6:	f023 0301 	bic.w	r3, r3, #1
 80006fa:	4313      	orrs	r3, r2
 80006fc:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80006fe:	6808      	ldr	r0, [r1, #0]
 8000700:	f000 0001 	and.w	r0, r0, #1
 8000704:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000706:	b002      	add	sp, #8
 8000708:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800070a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800070c:	4914      	ldr	r1, [pc, #80]	; (8000760 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800070e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000712:	d00f      	beq.n	8000734 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000714:	680a      	ldr	r2, [r1, #0]
 8000716:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800071a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800071e:	d1e7      	bne.n	80006f0 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000720:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000724:	d1e4      	bne.n	80006f0 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8000726:	4a0d      	ldr	r2, [pc, #52]	; (800075c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000728:	6813      	ldr	r3, [r2, #0]
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000730:	2201      	movs	r2, #1
 8000732:	e7de      	b.n	80006f2 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000736:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
 800073c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800073e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000742:	9201      	str	r2, [sp, #4]
 8000744:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000746:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000748:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800074a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800074e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8000752:	6259      	str	r1, [r3, #36]	; 0x24
 8000754:	e7e1      	b.n	800071a <RCC_SetFlashLatencyFromMSIRange+0x36>
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40023c00 	.word	0x40023c00
 8000760:	40007000 	.word	0x40007000

08000764 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000764:	6803      	ldr	r3, [r0, #0]
{
 8000766:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800076a:	07d9      	lsls	r1, r3, #31
{
 800076c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800076e:	d46a      	bmi.n	8000846 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	079a      	lsls	r2, r3, #30
 8000774:	f100 80e6 	bmi.w	8000944 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	06de      	lsls	r6, r3, #27
 800077c:	d555      	bpl.n	800082a <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800077e:	4dc1      	ldr	r5, [pc, #772]	; (8000a84 <HAL_RCC_OscConfig+0x320>)
 8000780:	68ab      	ldr	r3, [r5, #8]
 8000782:	f013 0f0c 	tst.w	r3, #12
 8000786:	f040 8183 	bne.w	8000a90 <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800078a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800078e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000792:	6829      	ldr	r1, [r5, #0]
 8000794:	fa93 f3a3 	rbit	r3, r3
 8000798:	fab3 f383 	clz	r3, r3
 800079c:	2201      	movs	r2, #1
 800079e:	f003 031f 	and.w	r3, r3, #31
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	420b      	tst	r3, r1
 80007a8:	d002      	beq.n	80007b0 <HAL_RCC_OscConfig+0x4c>
 80007aa:	69a3      	ldr	r3, [r4, #24]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d06e      	beq.n	800088e <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80007b0:	4db4      	ldr	r5, [pc, #720]	; (8000a84 <HAL_RCC_OscConfig+0x320>)
 80007b2:	6a20      	ldr	r0, [r4, #32]
 80007b4:	686b      	ldr	r3, [r5, #4]
 80007b6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80007ba:	4298      	cmp	r0, r3
 80007bc:	f240 814a 	bls.w	8000a54 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80007c0:	f7ff ff90 	bl	80006e4 <RCC_SetFlashLatencyFromMSIRange>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d162      	bne.n	800088e <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007c8:	686b      	ldr	r3, [r5, #4]
 80007ca:	6a22      	ldr	r2, [r4, #32]
 80007cc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80007d0:	4313      	orrs	r3, r2
 80007d2:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007d4:	6869      	ldr	r1, [r5, #4]
 80007d6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80007da:	fa93 f3a3 	rbit	r3, r3
 80007de:	fab3 f283 	clz	r2, r3
 80007e2:	69e3      	ldr	r3, [r4, #28]
 80007e4:	4093      	lsls	r3, r2
 80007e6:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80007ea:	4313      	orrs	r3, r2
 80007ec:	606b      	str	r3, [r5, #4]
 80007ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007f2:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80007f6:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80007fa:	4ba2      	ldr	r3, [pc, #648]	; (8000a84 <HAL_RCC_OscConfig+0x320>)
 80007fc:	21f0      	movs	r1, #240	; 0xf0
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	fa91 f1a1 	rbit	r1, r1
 8000804:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000808:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800080a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800080e:	40c3      	lsrs	r3, r0
 8000810:	1c58      	adds	r0, r3, #1
 8000812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000816:	40ca      	lsrs	r2, r1
 8000818:	499b      	ldr	r1, [pc, #620]	; (8000a88 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800081a:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800081c:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 800081e:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000820:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000822:	4a9a      	ldr	r2, [pc, #616]	; (8000a8c <HAL_RCC_OscConfig+0x328>)
 8000824:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000826:	f7ff fcb1 	bl	800018c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	071d      	lsls	r5, r3, #28
 800082e:	f100 8191 	bmi.w	8000b54 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	0758      	lsls	r0, r3, #29
 8000836:	f100 81d3 	bmi.w	8000be0 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800083a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800083c:	2a00      	cmp	r2, #0
 800083e:	f040 8257 	bne.w	8000cf0 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8000842:	2000      	movs	r0, #0
 8000844:	e024      	b.n	8000890 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000846:	4b8f      	ldr	r3, [pc, #572]	; (8000a84 <HAL_RCC_OscConfig+0x320>)
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	f002 020c 	and.w	r2, r2, #12
 800084e:	2a08      	cmp	r2, #8
 8000850:	d007      	beq.n	8000862 <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	f002 020c 	and.w	r2, r2, #12
 8000858:	2a0c      	cmp	r2, #12
 800085a:	d11c      	bne.n	8000896 <HAL_RCC_OscConfig+0x132>
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	03db      	lsls	r3, r3, #15
 8000860:	d519      	bpl.n	8000896 <HAL_RCC_OscConfig+0x132>
 8000862:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000866:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800086a:	4a86      	ldr	r2, [pc, #536]	; (8000a84 <HAL_RCC_OscConfig+0x320>)
 800086c:	6811      	ldr	r1, [r2, #0]
 800086e:	fa93 f3a3 	rbit	r3, r3
 8000872:	fab3 f383 	clz	r3, r3
 8000876:	2201      	movs	r2, #1
 8000878:	f003 031f 	and.w	r3, r3, #31
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	420b      	tst	r3, r1
 8000882:	f43f af75 	beq.w	8000770 <HAL_RCC_OscConfig+0xc>
 8000886:	6863      	ldr	r3, [r4, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	f47f af71 	bne.w	8000770 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800088e:	2001      	movs	r0, #1
}
 8000890:	b003      	add	sp, #12
 8000892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000896:	6863      	ldr	r3, [r4, #4]
 8000898:	4d7a      	ldr	r5, [pc, #488]	; (8000a84 <HAL_RCC_OscConfig+0x320>)
 800089a:	2b01      	cmp	r3, #1
 800089c:	d120      	bne.n	80008e0 <HAL_RCC_OscConfig+0x17c>
 800089e:	682b      	ldr	r3, [r5, #0]
 80008a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008a6:	f7ff fc99 	bl	80001dc <HAL_GetTick>
 80008aa:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80008ae:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008b0:	2601      	movs	r6, #1
 80008b2:	4f74      	ldr	r7, [pc, #464]	; (8000a84 <HAL_RCC_OscConfig+0x320>)
 80008b4:	fa95 f3a5 	rbit	r3, r5
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	fa95 f3a5 	rbit	r3, r5
 80008be:	fab3 f383 	clz	r3, r3
 80008c2:	f003 031f 	and.w	r3, r3, #31
 80008c6:	fa06 f303 	lsl.w	r3, r6, r3
 80008ca:	4213      	tst	r3, r2
 80008cc:	f47f af50 	bne.w	8000770 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d0:	f7ff fc84 	bl	80001dc <HAL_GetTick>
 80008d4:	eba0 0008 	sub.w	r0, r0, r8
 80008d8:	2864      	cmp	r0, #100	; 0x64
 80008da:	d9eb      	bls.n	80008b4 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 80008dc:	2003      	movs	r0, #3
 80008de:	e7d7      	b.n	8000890 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e0:	bb13      	cbnz	r3, 8000928 <HAL_RCC_OscConfig+0x1c4>
 80008e2:	682b      	ldr	r3, [r5, #0]
 80008e4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80008e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ec:	602b      	str	r3, [r5, #0]
 80008ee:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008f0:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008f8:	f7ff fc70 	bl	80001dc <HAL_GetTick>
 80008fc:	4680      	mov	r8, r0
 80008fe:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000902:	682a      	ldr	r2, [r5, #0]
 8000904:	fa96 f3a6 	rbit	r3, r6
 8000908:	fab3 f383 	clz	r3, r3
 800090c:	f003 031f 	and.w	r3, r3, #31
 8000910:	fa07 f303 	lsl.w	r3, r7, r3
 8000914:	4213      	tst	r3, r2
 8000916:	f43f af2b 	beq.w	8000770 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800091a:	f7ff fc5f 	bl	80001dc <HAL_GetTick>
 800091e:	eba0 0008 	sub.w	r0, r0, r8
 8000922:	2864      	cmp	r0, #100	; 0x64
 8000924:	d9eb      	bls.n	80008fe <HAL_RCC_OscConfig+0x19a>
 8000926:	e7d9      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000928:	2b05      	cmp	r3, #5
 800092a:	682b      	ldr	r3, [r5, #0]
 800092c:	d103      	bne.n	8000936 <HAL_RCC_OscConfig+0x1d2>
 800092e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000932:	602b      	str	r3, [r5, #0]
 8000934:	e7b3      	b.n	800089e <HAL_RCC_OscConfig+0x13a>
 8000936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800093a:	602b      	str	r3, [r5, #0]
 800093c:	682b      	ldr	r3, [r5, #0]
 800093e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000942:	e7af      	b.n	80008a4 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000944:	4b4f      	ldr	r3, [pc, #316]	; (8000a84 <HAL_RCC_OscConfig+0x320>)
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	f002 020c 	and.w	r2, r2, #12
 800094c:	2a04      	cmp	r2, #4
 800094e:	d007      	beq.n	8000960 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	f002 020c 	and.w	r2, r2, #12
 8000956:	2a0c      	cmp	r2, #12
 8000958:	d124      	bne.n	80009a4 <HAL_RCC_OscConfig+0x240>
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	03df      	lsls	r7, r3, #15
 800095e:	d421      	bmi.n	80009a4 <HAL_RCC_OscConfig+0x240>
 8000960:	2302      	movs	r3, #2
 8000962:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000966:	4a47      	ldr	r2, [pc, #284]	; (8000a84 <HAL_RCC_OscConfig+0x320>)
 8000968:	6810      	ldr	r0, [r2, #0]
 800096a:	fa93 f3a3 	rbit	r3, r3
 800096e:	fab3 f383 	clz	r3, r3
 8000972:	2101      	movs	r1, #1
 8000974:	f003 031f 	and.w	r3, r3, #31
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	4203      	tst	r3, r0
 800097e:	4613      	mov	r3, r2
 8000980:	d002      	beq.n	8000988 <HAL_RCC_OscConfig+0x224>
 8000982:	68e2      	ldr	r2, [r4, #12]
 8000984:	428a      	cmp	r2, r1
 8000986:	d182      	bne.n	800088e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000988:	6858      	ldr	r0, [r3, #4]
 800098a:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800098e:	fa92 f2a2 	rbit	r2, r2
 8000992:	fab2 f182 	clz	r1, r2
 8000996:	6922      	ldr	r2, [r4, #16]
 8000998:	408a      	lsls	r2, r1
 800099a:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 800099e:	430a      	orrs	r2, r1
 80009a0:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a2:	e6e9      	b.n	8000778 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009a4:	68e2      	ldr	r2, [r4, #12]
 80009a6:	2501      	movs	r5, #1
 80009a8:	b382      	cbz	r2, 8000a0c <HAL_RCC_OscConfig+0x2a8>
 80009aa:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 80009ae:	fab3 f383 	clz	r3, r3
 80009b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009b6:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80009be:	f7ff fc0d 	bl	80001dc <HAL_GetTick>
 80009c2:	2702      	movs	r7, #2
 80009c4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c6:	4e2f      	ldr	r6, [pc, #188]	; (8000a84 <HAL_RCC_OscConfig+0x320>)
 80009c8:	fa97 f3a7 	rbit	r3, r7
 80009cc:	6832      	ldr	r2, [r6, #0]
 80009ce:	fa97 f3a7 	rbit	r3, r7
 80009d2:	fab3 f383 	clz	r3, r3
 80009d6:	f003 031f 	and.w	r3, r3, #31
 80009da:	fa05 f303 	lsl.w	r3, r5, r3
 80009de:	4213      	tst	r3, r2
 80009e0:	d00d      	beq.n	80009fe <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e2:	6871      	ldr	r1, [r6, #4]
 80009e4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80009e8:	fa93 f3a3 	rbit	r3, r3
 80009ec:	fab3 f283 	clz	r2, r3
 80009f0:	6923      	ldr	r3, [r4, #16]
 80009f2:	4093      	lsls	r3, r2
 80009f4:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 80009f8:	4313      	orrs	r3, r2
 80009fa:	6073      	str	r3, [r6, #4]
 80009fc:	e6bc      	b.n	8000778 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009fe:	f7ff fbed 	bl	80001dc <HAL_GetTick>
 8000a02:	eba0 0008 	sub.w	r0, r0, r8
 8000a06:	2802      	cmp	r0, #2
 8000a08:	d9de      	bls.n	80009c8 <HAL_RCC_OscConfig+0x264>
 8000a0a:	e767      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
 8000a0c:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000a10:	fab3 f383 	clz	r3, r3
 8000a14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a18:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a20:	f7ff fbdc 	bl	80001dc <HAL_GetTick>
 8000a24:	2602      	movs	r6, #2
 8000a26:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a28:	4f16      	ldr	r7, [pc, #88]	; (8000a84 <HAL_RCC_OscConfig+0x320>)
 8000a2a:	fa96 f3a6 	rbit	r3, r6
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	fa96 f3a6 	rbit	r3, r6
 8000a34:	fab3 f383 	clz	r3, r3
 8000a38:	f003 031f 	and.w	r3, r3, #31
 8000a3c:	fa05 f303 	lsl.w	r3, r5, r3
 8000a40:	4213      	tst	r3, r2
 8000a42:	f43f ae99 	beq.w	8000778 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a46:	f7ff fbc9 	bl	80001dc <HAL_GetTick>
 8000a4a:	eba0 0008 	sub.w	r0, r0, r8
 8000a4e:	2802      	cmp	r0, #2
 8000a50:	d9eb      	bls.n	8000a2a <HAL_RCC_OscConfig+0x2c6>
 8000a52:	e743      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a54:	686b      	ldr	r3, [r5, #4]
 8000a56:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000a5a:	4303      	orrs	r3, r0
 8000a5c:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a5e:	6869      	ldr	r1, [r5, #4]
 8000a60:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000a64:	fa93 f3a3 	rbit	r3, r3
 8000a68:	fab3 f283 	clz	r2, r3
 8000a6c:	69e3      	ldr	r3, [r4, #28]
 8000a6e:	4093      	lsls	r3, r2
 8000a70:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000a74:	4313      	orrs	r3, r2
 8000a76:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a78:	f7ff fe34 	bl	80006e4 <RCC_SetFlashLatencyFromMSIRange>
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	f43f aeb6 	beq.w	80007ee <HAL_RCC_OscConfig+0x8a>
 8000a82:	e704      	b.n	800088e <HAL_RCC_OscConfig+0x12a>
 8000a84:	40023800 	.word	0x40023800
 8000a88:	08002344 	.word	0x08002344
 8000a8c:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a90:	69a2      	ldr	r2, [r4, #24]
 8000a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a96:	2a00      	cmp	r2, #0
 8000a98:	d037      	beq.n	8000b0a <HAL_RCC_OscConfig+0x3a6>
 8000a9a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8000a9e:	fab3 f383 	clz	r3, r3
 8000aa2:	2601      	movs	r6, #1
 8000aa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000aa8:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000ab0:	f7ff fb94 	bl	80001dc <HAL_GetTick>
 8000ab4:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000ab8:	4680      	mov	r8, r0
 8000aba:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000abe:	682a      	ldr	r2, [r5, #0]
 8000ac0:	fa97 f3a7 	rbit	r3, r7
 8000ac4:	fab3 f383 	clz	r3, r3
 8000ac8:	f003 031f 	and.w	r3, r3, #31
 8000acc:	fa06 f303 	lsl.w	r3, r6, r3
 8000ad0:	4213      	tst	r3, r2
 8000ad2:	d013      	beq.n	8000afc <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ad4:	686b      	ldr	r3, [r5, #4]
 8000ad6:	6a22      	ldr	r2, [r4, #32]
 8000ad8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000adc:	4313      	orrs	r3, r2
 8000ade:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ae0:	6869      	ldr	r1, [r5, #4]
 8000ae2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000ae6:	fa93 f3a3 	rbit	r3, r3
 8000aea:	fab3 f283 	clz	r2, r3
 8000aee:	69e3      	ldr	r3, [r4, #28]
 8000af0:	4093      	lsls	r3, r2
 8000af2:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000af6:	4313      	orrs	r3, r2
 8000af8:	606b      	str	r3, [r5, #4]
 8000afa:	e696      	b.n	800082a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000afc:	f7ff fb6e 	bl	80001dc <HAL_GetTick>
 8000b00:	eba0 0008 	sub.w	r0, r0, r8
 8000b04:	2802      	cmp	r0, #2
 8000b06:	d9d8      	bls.n	8000aba <HAL_RCC_OscConfig+0x356>
 8000b08:	e6e8      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
 8000b0a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8000b0e:	fab3 f383 	clz	r3, r3
 8000b12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b16:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b1e:	f7ff fb5d 	bl	80001dc <HAL_GetTick>
 8000b22:	f44f 7600 	mov.w	r6, #512	; 0x200
 8000b26:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000b28:	2701      	movs	r7, #1
 8000b2a:	fa96 f3a6 	rbit	r3, r6
 8000b2e:	682a      	ldr	r2, [r5, #0]
 8000b30:	fa96 f3a6 	rbit	r3, r6
 8000b34:	fab3 f383 	clz	r3, r3
 8000b38:	f003 031f 	and.w	r3, r3, #31
 8000b3c:	fa07 f303 	lsl.w	r3, r7, r3
 8000b40:	4213      	tst	r3, r2
 8000b42:	f43f ae72 	beq.w	800082a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b46:	f7ff fb49 	bl	80001dc <HAL_GetTick>
 8000b4a:	eba0 0008 	sub.w	r0, r0, r8
 8000b4e:	2802      	cmp	r0, #2
 8000b50:	d9eb      	bls.n	8000b2a <HAL_RCC_OscConfig+0x3c6>
 8000b52:	e6c3      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b54:	6962      	ldr	r2, [r4, #20]
 8000b56:	2501      	movs	r5, #1
 8000b58:	49a9      	ldr	r1, [pc, #676]	; (8000e00 <HAL_RCC_OscConfig+0x69c>)
 8000b5a:	b302      	cbz	r2, 8000b9e <HAL_RCC_OscConfig+0x43a>
 8000b5c:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8000b60:	fab3 f383 	clz	r3, r3
 8000b64:	440b      	add	r3, r1
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8000b6a:	f7ff fb37 	bl	80001dc <HAL_GetTick>
 8000b6e:	2602      	movs	r6, #2
 8000b70:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b72:	4fa4      	ldr	r7, [pc, #656]	; (8000e04 <HAL_RCC_OscConfig+0x6a0>)
 8000b74:	fa96 f3a6 	rbit	r3, r6
 8000b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b7a:	fa96 f3a6 	rbit	r3, r6
 8000b7e:	fab3 f383 	clz	r3, r3
 8000b82:	f003 031f 	and.w	r3, r3, #31
 8000b86:	fa05 f303 	lsl.w	r3, r5, r3
 8000b8a:	4213      	tst	r3, r2
 8000b8c:	f47f ae51 	bne.w	8000832 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b90:	f7ff fb24 	bl	80001dc <HAL_GetTick>
 8000b94:	eba0 0008 	sub.w	r0, r0, r8
 8000b98:	2802      	cmp	r0, #2
 8000b9a:	d9eb      	bls.n	8000b74 <HAL_RCC_OscConfig+0x410>
 8000b9c:	e69e      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
 8000b9e:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 8000ba2:	fab3 f383 	clz	r3, r3
 8000ba6:	440b      	add	r3, r1
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bac:	f7ff fb16 	bl	80001dc <HAL_GetTick>
 8000bb0:	2602      	movs	r6, #2
 8000bb2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bb4:	4f93      	ldr	r7, [pc, #588]	; (8000e04 <HAL_RCC_OscConfig+0x6a0>)
 8000bb6:	fa96 f3a6 	rbit	r3, r6
 8000bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bbc:	fa96 f3a6 	rbit	r3, r6
 8000bc0:	fab3 f383 	clz	r3, r3
 8000bc4:	f003 031f 	and.w	r3, r3, #31
 8000bc8:	fa05 f303 	lsl.w	r3, r5, r3
 8000bcc:	4213      	tst	r3, r2
 8000bce:	f43f ae30 	beq.w	8000832 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bd2:	f7ff fb03 	bl	80001dc <HAL_GetTick>
 8000bd6:	eba0 0008 	sub.w	r0, r0, r8
 8000bda:	2802      	cmp	r0, #2
 8000bdc:	d9eb      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x452>
 8000bde:	e67d      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000be0:	4b88      	ldr	r3, [pc, #544]	; (8000e04 <HAL_RCC_OscConfig+0x6a0>)
 8000be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000be4:	00d1      	lsls	r1, r2, #3
 8000be6:	d434      	bmi.n	8000c52 <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8000be8:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
 8000bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bfc:	4d82      	ldr	r5, [pc, #520]	; (8000e08 <HAL_RCC_OscConfig+0x6a4>)
 8000bfe:	682b      	ldr	r3, [r5, #0]
 8000c00:	05da      	lsls	r2, r3, #23
 8000c02:	d528      	bpl.n	8000c56 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c04:	68a3      	ldr	r3, [r4, #8]
 8000c06:	4d7f      	ldr	r5, [pc, #508]	; (8000e04 <HAL_RCC_OscConfig+0x6a0>)
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d134      	bne.n	8000c76 <HAL_RCC_OscConfig+0x512>
 8000c0c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c14:	f7ff fae2 	bl	80001dc <HAL_GetTick>
 8000c18:	f44f 7500 	mov.w	r5, #512	; 0x200
 8000c1c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c1e:	2701      	movs	r7, #1
 8000c20:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000e04 <HAL_RCC_OscConfig+0x6a0>
 8000c24:	fa95 f3a5 	rbit	r3, r5
 8000c28:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8000c2c:	fa95 f3a5 	rbit	r3, r5
 8000c30:	fab3 f383 	clz	r3, r3
 8000c34:	f003 031f 	and.w	r3, r3, #31
 8000c38:	fa07 f303 	lsl.w	r3, r7, r3
 8000c3c:	4213      	tst	r3, r2
 8000c3e:	d04e      	beq.n	8000cde <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 8000c40:	2e00      	cmp	r6, #0
 8000c42:	f43f adfa 	beq.w	800083a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c46:	4a6f      	ldr	r2, [pc, #444]	; (8000e04 <HAL_RCC_OscConfig+0x6a0>)
 8000c48:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	6253      	str	r3, [r2, #36]	; 0x24
 8000c50:	e5f3      	b.n	800083a <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8000c52:	2600      	movs	r6, #0
 8000c54:	e7d2      	b.n	8000bfc <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c56:	682b      	ldr	r3, [r5, #0]
 8000c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c5e:	f7ff fabd 	bl	80001dc <HAL_GetTick>
 8000c62:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	d4cc      	bmi.n	8000c04 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c6a:	f7ff fab7 	bl	80001dc <HAL_GetTick>
 8000c6e:	1bc0      	subs	r0, r0, r7
 8000c70:	2864      	cmp	r0, #100	; 0x64
 8000c72:	d9f7      	bls.n	8000c64 <HAL_RCC_OscConfig+0x500>
 8000c74:	e632      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c76:	bb23      	cbnz	r3, 8000cc2 <HAL_RCC_OscConfig+0x55e>
 8000c78:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c7a:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c82:	636b      	str	r3, [r5, #52]	; 0x34
 8000c84:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c86:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c8e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c90:	f7ff faa4 	bl	80001dc <HAL_GetTick>
 8000c94:	4681      	mov	r9, r0
 8000c96:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c9a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c9c:	fa97 f3a7 	rbit	r3, r7
 8000ca0:	fab3 f383 	clz	r3, r3
 8000ca4:	f003 031f 	and.w	r3, r3, #31
 8000ca8:	fa08 f303 	lsl.w	r3, r8, r3
 8000cac:	4213      	tst	r3, r2
 8000cae:	d0c7      	beq.n	8000c40 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cb0:	f7ff fa94 	bl	80001dc <HAL_GetTick>
 8000cb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cb8:	eba0 0009 	sub.w	r0, r0, r9
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	d9ea      	bls.n	8000c96 <HAL_RCC_OscConfig+0x532>
 8000cc0:	e60c      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc2:	2b05      	cmp	r3, #5
 8000cc4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000cc6:	d103      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x56c>
 8000cc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ccc:	636b      	str	r3, [r5, #52]	; 0x34
 8000cce:	e79d      	b.n	8000c0c <HAL_RCC_OscConfig+0x4a8>
 8000cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cd4:	636b      	str	r3, [r5, #52]	; 0x34
 8000cd6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000cd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cdc:	e799      	b.n	8000c12 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cde:	f7ff fa7d 	bl	80001dc <HAL_GetTick>
 8000ce2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ce6:	eba0 0009 	sub.w	r0, r0, r9
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d99a      	bls.n	8000c24 <HAL_RCC_OscConfig+0x4c0>
 8000cee:	e5f5      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cf0:	4d44      	ldr	r5, [pc, #272]	; (8000e04 <HAL_RCC_OscConfig+0x6a0>)
 8000cf2:	68ab      	ldr	r3, [r5, #8]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b0c      	cmp	r3, #12
 8000cfa:	f43f adc8 	beq.w	800088e <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cfe:	2a02      	cmp	r2, #2
 8000d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d04:	d156      	bne.n	8000db4 <HAL_RCC_OscConfig+0x650>
 8000d06:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000d0a:	fab3 f383 	clz	r3, r3
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d14:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fa5e 	bl	80001dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d20:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8000d22:	4680      	mov	r8, r0
 8000d24:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d28:	2501      	movs	r5, #1
 8000d2a:	fa97 f3a7 	rbit	r3, r7
 8000d2e:	6832      	ldr	r2, [r6, #0]
 8000d30:	fa97 f3a7 	rbit	r3, r7
 8000d34:	fab3 f383 	clz	r3, r3
 8000d38:	f003 031f 	and.w	r3, r3, #31
 8000d3c:	fa05 f303 	lsl.w	r3, r5, r3
 8000d40:	4213      	tst	r3, r2
 8000d42:	d130      	bne.n	8000da6 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d44:	68b2      	ldr	r2, [r6, #8]
 8000d46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d4a:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000d4e:	430b      	orrs	r3, r1
 8000d50:	4313      	orrs	r3, r2
 8000d52:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d54:	4313      	orrs	r3, r2
 8000d56:	60b3      	str	r3, [r6, #8]
 8000d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d5c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000d60:	fab3 f383 	clz	r3, r3
 8000d64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d68:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000d70:	f7ff fa34 	bl	80001dc <HAL_GetTick>
 8000d74:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000d78:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d7a:	2501      	movs	r5, #1
 8000d7c:	4e21      	ldr	r6, [pc, #132]	; (8000e04 <HAL_RCC_OscConfig+0x6a0>)
 8000d7e:	fa94 f3a4 	rbit	r3, r4
 8000d82:	6832      	ldr	r2, [r6, #0]
 8000d84:	fa94 f3a4 	rbit	r3, r4
 8000d88:	fab3 f383 	clz	r3, r3
 8000d8c:	f003 031f 	and.w	r3, r3, #31
 8000d90:	fa05 f303 	lsl.w	r3, r5, r3
 8000d94:	4213      	tst	r3, r2
 8000d96:	f47f ad54 	bne.w	8000842 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d9a:	f7ff fa1f 	bl	80001dc <HAL_GetTick>
 8000d9e:	1bc0      	subs	r0, r0, r7
 8000da0:	2802      	cmp	r0, #2
 8000da2:	d9ec      	bls.n	8000d7e <HAL_RCC_OscConfig+0x61a>
 8000da4:	e59a      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000da6:	f7ff fa19 	bl	80001dc <HAL_GetTick>
 8000daa:	eba0 0008 	sub.w	r0, r0, r8
 8000dae:	2802      	cmp	r0, #2
 8000db0:	d9bb      	bls.n	8000d2a <HAL_RCC_OscConfig+0x5c6>
 8000db2:	e593      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
 8000db4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000db8:	fab3 f383 	clz	r3, r3
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000dc2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dca:	f7ff fa07 	bl	80001dc <HAL_GetTick>
 8000dce:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000dd2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dd4:	2601      	movs	r6, #1
 8000dd6:	fa94 f3a4 	rbit	r3, r4
 8000dda:	682a      	ldr	r2, [r5, #0]
 8000ddc:	fa94 f3a4 	rbit	r3, r4
 8000de0:	fab3 f383 	clz	r3, r3
 8000de4:	f003 031f 	and.w	r3, r3, #31
 8000de8:	fa06 f303 	lsl.w	r3, r6, r3
 8000dec:	4213      	tst	r3, r2
 8000dee:	f43f ad28 	beq.w	8000842 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000df2:	f7ff f9f3 	bl	80001dc <HAL_GetTick>
 8000df6:	1bc0      	subs	r0, r0, r7
 8000df8:	2802      	cmp	r0, #2
 8000dfa:	d9ec      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x672>
 8000dfc:	e56e      	b.n	80008dc <HAL_RCC_OscConfig+0x178>
 8000dfe:	bf00      	nop
 8000e00:	1091c1a0 	.word	0x1091c1a0
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40007000 	.word	0x40007000

08000e0c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000e0c:	491e      	ldr	r1, [pc, #120]	; (8000e88 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8000e0e:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000e10:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e12:	f003 020c 	and.w	r2, r3, #12
 8000e16:	2a08      	cmp	r2, #8
 8000e18:	d005      	beq.n	8000e26 <HAL_RCC_GetSysClockFreq+0x1a>
 8000e1a:	2a0c      	cmp	r2, #12
 8000e1c:	d005      	beq.n	8000e2a <HAL_RCC_GetSysClockFreq+0x1e>
 8000e1e:	2a04      	cmp	r2, #4
 8000e20:	d122      	bne.n	8000e68 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8000e22:	481a      	ldr	r0, [pc, #104]	; (8000e8c <HAL_RCC_GetSysClockFreq+0x80>)
}
 8000e24:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000e26:	481a      	ldr	r0, [pc, #104]	; (8000e90 <HAL_RCC_GetSysClockFreq+0x84>)
 8000e28:	bd10      	pop	{r4, pc}
 8000e2a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000e2e:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000e32:	fab2 f282 	clz	r2, r2
 8000e36:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8000e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3e:	4815      	ldr	r0, [pc, #84]	; (8000e94 <HAL_RCC_GetSysClockFreq+0x88>)
 8000e40:	5c84      	ldrb	r4, [r0, r2]
 8000e42:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8000e46:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000e4a:	fab0 f280 	clz	r2, r0
 8000e4e:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e52:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000e54:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e56:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8000e58:	bf4c      	ite	mi
 8000e5a:	4b0d      	ldrmi	r3, [pc, #52]	; (8000e90 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8000e5c:	4b0b      	ldrpl	r3, [pc, #44]	; (8000e8c <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000e5e:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8000e60:	4363      	muls	r3, r4
 8000e62:	fbb3 f0f0 	udiv	r0, r3, r0
 8000e66:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000e68:	6848      	ldr	r0, [r1, #4]
 8000e6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	fab3 f383 	clz	r3, r3
 8000e76:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8000e7a:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8000e7c:	1c43      	adds	r3, r0, #1
 8000e7e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e82:	4098      	lsls	r0, r3
 8000e84:	bd10      	pop	{r4, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	00f42400 	.word	0x00f42400
 8000e90:	016e3600 	.word	0x016e3600
 8000e94:	08002354 	.word	0x08002354

08000e98 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e98:	4b6a      	ldr	r3, [pc, #424]	; (8001044 <HAL_RCC_ClockConfig+0x1ac>)
{
 8000e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e9e:	681a      	ldr	r2, [r3, #0]
{
 8000ea0:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ea2:	f002 0201 	and.w	r2, r2, #1
 8000ea6:	428a      	cmp	r2, r1
{
 8000ea8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000eaa:	d330      	bcc.n	8000f0e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000eac:	6832      	ldr	r2, [r6, #0]
 8000eae:	0794      	lsls	r4, r2, #30
 8000eb0:	d440      	bmi.n	8000f34 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eb2:	07d0      	lsls	r0, r2, #31
 8000eb4:	d446      	bmi.n	8000f44 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000eb6:	4b63      	ldr	r3, [pc, #396]	; (8001044 <HAL_RCC_ClockConfig+0x1ac>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	f002 0201 	and.w	r2, r2, #1
 8000ebe:	4295      	cmp	r5, r2
 8000ec0:	f0c0 80ae 	bcc.w	8001020 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ec4:	6832      	ldr	r2, [r6, #0]
 8000ec6:	0751      	lsls	r1, r2, #29
 8000ec8:	f100 80b3 	bmi.w	8001032 <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ecc:	0713      	lsls	r3, r2, #28
 8000ece:	d507      	bpl.n	8000ee0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ed0:	4a5d      	ldr	r2, [pc, #372]	; (8001048 <HAL_RCC_ClockConfig+0x1b0>)
 8000ed2:	6931      	ldr	r1, [r6, #16]
 8000ed4:	6893      	ldr	r3, [r2, #8]
 8000ed6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000eda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ede:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ee0:	f7ff ff94 	bl	8000e0c <HAL_RCC_GetSysClockFreq>
 8000ee4:	4b58      	ldr	r3, [pc, #352]	; (8001048 <HAL_RCC_ClockConfig+0x1b0>)
 8000ee6:	22f0      	movs	r2, #240	; 0xf0
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	fa92 f2a2 	rbit	r2, r2
 8000eee:	fab2 f282 	clz	r2, r2
 8000ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ef6:	40d3      	lsrs	r3, r2
 8000ef8:	4a54      	ldr	r2, [pc, #336]	; (800104c <HAL_RCC_ClockConfig+0x1b4>)
 8000efa:	5cd3      	ldrb	r3, [r2, r3]
 8000efc:	40d8      	lsrs	r0, r3
 8000efe:	4b54      	ldr	r3, [pc, #336]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000f00:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff f942 	bl	800018c <HAL_InitTick>
  return HAL_OK;
 8000f08:	2000      	movs	r0, #0
}
 8000f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	bf02      	ittt	eq
 8000f12:	681a      	ldreq	r2, [r3, #0]
 8000f14:	f042 0204 	orreq.w	r2, r2, #4
 8000f18:	601a      	streq	r2, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	f022 0201 	bic.w	r2, r2, #1
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	4299      	cmp	r1, r3
 8000f2c:	d0be      	beq.n	8000eac <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000f2e:	2001      	movs	r0, #1
 8000f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f34:	4944      	ldr	r1, [pc, #272]	; (8001048 <HAL_RCC_ClockConfig+0x1b0>)
 8000f36:	68b0      	ldr	r0, [r6, #8]
 8000f38:	688b      	ldr	r3, [r1, #8]
 8000f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f3e:	4303      	orrs	r3, r0
 8000f40:	608b      	str	r3, [r1, #8]
 8000f42:	e7b6      	b.n	8000eb2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f44:	6872      	ldr	r2, [r6, #4]
 8000f46:	4940      	ldr	r1, [pc, #256]	; (8001048 <HAL_RCC_ClockConfig+0x1b0>)
 8000f48:	2a02      	cmp	r2, #2
 8000f4a:	d10f      	bne.n	8000f6c <HAL_RCC_ClockConfig+0xd4>
 8000f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f50:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000f54:	6808      	ldr	r0, [r1, #0]
 8000f56:	fa93 f3a3 	rbit	r3, r3
 8000f5a:	fab3 f383 	clz	r3, r3
 8000f5e:	2101      	movs	r1, #1
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	4203      	tst	r3, r0
 8000f6a:	e013      	b.n	8000f94 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f6c:	2a03      	cmp	r2, #3
 8000f6e:	d102      	bne.n	8000f76 <HAL_RCC_ClockConfig+0xde>
 8000f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f74:	e7ec      	b.n	8000f50 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000f76:	2a01      	cmp	r2, #1
 8000f78:	d129      	bne.n	8000fce <HAL_RCC_ClockConfig+0x136>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f80:	6809      	ldr	r1, [r1, #0]
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	fab3 f383 	clz	r3, r3
 8000f8a:	f003 031f 	and.w	r3, r3, #31
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000f94:	d0cb      	beq.n	8000f2e <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f96:	4c2c      	ldr	r4, [pc, #176]	; (8001048 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f98:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f9c:	68a3      	ldr	r3, [r4, #8]
 8000f9e:	f023 0303 	bic.w	r3, r3, #3
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8000fa6:	f7ff f919 	bl	80001dc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000faa:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000fac:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d110      	bne.n	8000fd4 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb2:	68a3      	ldr	r3, [r4, #8]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	f43f af7c 	beq.w	8000eb6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fbe:	f7ff f90d 	bl	80001dc <HAL_GetTick>
 8000fc2:	1bc0      	subs	r0, r0, r7
 8000fc4:	4540      	cmp	r0, r8
 8000fc6:	d9f4      	bls.n	8000fb2 <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8000fc8:	2003      	movs	r0, #3
 8000fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd2:	e7bd      	b.n	8000f50 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d10b      	bne.n	8000ff0 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fd8:	68a3      	ldr	r3, [r4, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	2b0c      	cmp	r3, #12
 8000fe0:	f43f af69 	beq.w	8000eb6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe4:	f7ff f8fa 	bl	80001dc <HAL_GetTick>
 8000fe8:	1bc0      	subs	r0, r0, r7
 8000fea:	4540      	cmp	r0, r8
 8000fec:	d9f4      	bls.n	8000fd8 <HAL_RCC_ClockConfig+0x140>
 8000fee:	e7eb      	b.n	8000fc8 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d110      	bne.n	8001016 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ff4:	68a3      	ldr	r3, [r4, #8]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	f43f af5b 	beq.w	8000eb6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001000:	f7ff f8ec 	bl	80001dc <HAL_GetTick>
 8001004:	1bc0      	subs	r0, r0, r7
 8001006:	4540      	cmp	r0, r8
 8001008:	d9f4      	bls.n	8000ff4 <HAL_RCC_ClockConfig+0x15c>
 800100a:	e7dd      	b.n	8000fc8 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100c:	f7ff f8e6 	bl	80001dc <HAL_GetTick>
 8001010:	1bc0      	subs	r0, r0, r7
 8001012:	4540      	cmp	r0, r8
 8001014:	d8d8      	bhi.n	8000fc8 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001016:	68a3      	ldr	r3, [r4, #8]
 8001018:	f013 0f0c 	tst.w	r3, #12
 800101c:	d1f6      	bne.n	800100c <HAL_RCC_ClockConfig+0x174>
 800101e:	e74a      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	07da      	lsls	r2, r3, #31
 800102c:	f53f af7f 	bmi.w	8000f2e <HAL_RCC_ClockConfig+0x96>
 8001030:	e748      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001032:	4905      	ldr	r1, [pc, #20]	; (8001048 <HAL_RCC_ClockConfig+0x1b0>)
 8001034:	68f0      	ldr	r0, [r6, #12]
 8001036:	688b      	ldr	r3, [r1, #8]
 8001038:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800103c:	4303      	orrs	r3, r0
 800103e:	608b      	str	r3, [r1, #8]
 8001040:	e744      	b.n	8000ecc <HAL_RCC_ClockConfig+0x34>
 8001042:	bf00      	nop
 8001044:	40023c00 	.word	0x40023c00
 8001048:	40023800 	.word	0x40023800
 800104c:	08002344 	.word	0x08002344
 8001050:	20000000 	.word	0x20000000

08001054 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001054:	6803      	ldr	r3, [r0, #0]
{
 8001056:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800105a:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 800105c:	0798      	lsls	r0, r3, #30
 800105e:	d101      	bne.n	8001064 <HAL_RCCEx_PeriphCLKConfig+0x10>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  
  return HAL_OK;
 8001060:	2000      	movs	r0, #0
 8001062:	e055      	b.n	8001110 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001064:	4b4f      	ldr	r3, [pc, #316]	; (80011a4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001068:	00d1      	lsls	r1, r2, #3
 800106a:	d43f      	bmi.n	80010ec <HAL_RCCEx_PeriphCLKConfig+0x98>
      pwrclkchanged = SET;
 800106c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001070:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001080:	4e49      	ldr	r6, [pc, #292]	; (80011a8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001082:	6833      	ldr	r3, [r6, #0]
 8001084:	05da      	lsls	r2, r3, #23
 8001086:	d533      	bpl.n	80010f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001088:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800108a:	6862      	ldr	r2, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800108c:	6819      	ldr	r1, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800108e:	f002 40c0 	and.w	r0, r2, #1610612736	; 0x60000000
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001092:	f001 41c0 	and.w	r1, r1, #1610612736	; 0x60000000
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001096:	4281      	cmp	r1, r0
 8001098:	d104      	bne.n	80010a4 <HAL_RCCEx_PeriphCLKConfig+0x50>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800109a:	68a0      	ldr	r0, [r4, #8]
 800109c:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 80010a0:	4281      	cmp	r1, r0
 80010a2:	d007      	beq.n	80010b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80010a4:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80010a8:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80010ac:	d102      	bne.n	80010b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80010ae:	6819      	ldr	r1, [r3, #0]
 80010b0:	0388      	lsls	r0, r1, #14
 80010b2:	d475      	bmi.n	80011a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80010b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80010b6:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 80010ba:	d12c      	bne.n	8001116 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80010bc:	6860      	ldr	r0, [r4, #4]
 80010be:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80010c0:	f400 3140 	and.w	r1, r0, #196608	; 0x30000
 80010c4:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80010c8:	d106      	bne.n	80010d8 <HAL_RCCEx_PeriphCLKConfig+0x84>
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 80010d0:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 80010d4:	4302      	orrs	r2, r0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010da:	4311      	orrs	r1, r2
 80010dc:	6359      	str	r1, [r3, #52]	; 0x34
    if(pwrclkchanged == SET)
 80010de:	2d00      	cmp	r5, #0
 80010e0:	d0be      	beq.n	8001060 <HAL_RCCEx_PeriphCLKConfig+0xc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
 80010ea:	e7b9      	b.n	8001060 <HAL_RCCEx_PeriphCLKConfig+0xc>
    FlagStatus       pwrclkchanged = RESET;
 80010ec:	2500      	movs	r5, #0
 80010ee:	e7c7      	b.n	8001080 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010f0:	6833      	ldr	r3, [r6, #0]
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010f8:	f7ff f870 	bl	80001dc <HAL_GetTick>
 80010fc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fe:	6833      	ldr	r3, [r6, #0]
 8001100:	05db      	lsls	r3, r3, #23
 8001102:	d4c1      	bmi.n	8001088 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001104:	f7ff f86a 	bl	80001dc <HAL_GetTick>
 8001108:	1bc0      	subs	r0, r0, r7
 800110a:	2864      	cmp	r0, #100	; 0x64
 800110c:	d9f7      	bls.n	80010fe <HAL_RCCEx_PeriphCLKConfig+0xaa>
          return HAL_TIMEOUT;
 800110e:	2003      	movs	r0, #3
}
 8001110:	b003      	add	sp, #12
 8001112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001116:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800111a:	4293      	cmp	r3, r2
 800111c:	d002      	beq.n	8001124 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800111e:	6822      	ldr	r2, [r4, #0]
 8001120:	07d1      	lsls	r1, r2, #31
 8001122:	d407      	bmi.n	8001134 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001124:	68a2      	ldr	r2, [r4, #8]
 8001126:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800112a:	4293      	cmp	r3, r2
 800112c:	d0c6      	beq.n	80010bc <HAL_RCCEx_PeriphCLKConfig+0x68>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	079a      	lsls	r2, r3, #30
 8001132:	d5c3      	bpl.n	80010bc <HAL_RCCEx_PeriphCLKConfig+0x68>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001134:	4e1b      	ldr	r6, [pc, #108]	; (80011a4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001136:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800113a:	6b71      	ldr	r1, [r6, #52]	; 0x34
 800113c:	f421 3040 	bic.w	r0, r1, #196608	; 0x30000
 8001140:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001144:	fab2 f282 	clz	r2, r2
 8001148:	2701      	movs	r7, #1
 800114a:	f8df e060 	ldr.w	lr, [pc, #96]	; 80011ac <HAL_RCCEx_PeriphCLKConfig+0x158>
 800114e:	4472      	add	r2, lr
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	6017      	str	r7, [r2, #0]
 8001154:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001158:	fab3 f383 	clz	r3, r3
 800115c:	2200      	movs	r2, #0
 800115e:	4473      	add	r3, lr
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001164:	05cb      	lsls	r3, r1, #23
      RCC->CSR = temp_reg;
 8001166:	6370      	str	r0, [r6, #52]	; 0x34
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001168:	d5a8      	bpl.n	80010bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        tickstart = HAL_GetTick();
 800116a:	f7ff f837 	bl	80001dc <HAL_GetTick>
 800116e:	f44f 7800 	mov.w	r8, #512	; 0x200
 8001172:	4681      	mov	r9, r0
 8001174:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001178:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800117a:	fa98 f3a8 	rbit	r3, r8
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	f003 031f 	and.w	r3, r3, #31
 8001186:	fa07 f303 	lsl.w	r3, r7, r3
 800118a:	4213      	tst	r3, r2
 800118c:	d196      	bne.n	80010bc <HAL_RCCEx_PeriphCLKConfig+0x68>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800118e:	f7ff f825 	bl	80001dc <HAL_GetTick>
 8001192:	f241 3388 	movw	r3, #5000	; 0x1388
 8001196:	eba0 0009 	sub.w	r0, r0, r9
 800119a:	4298      	cmp	r0, r3
 800119c:	d9ea      	bls.n	8001174 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800119e:	e7b6      	b.n	800110e <HAL_RCCEx_PeriphCLKConfig+0xba>
        return HAL_ERROR; 
 80011a0:	2001      	movs	r0, #1
 80011a2:	e7b5      	b.n	8001110 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000
 80011ac:	1091c1a0 	.word	0x1091c1a0

080011b0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80011b4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011b6:	d00e      	beq.n	80011d6 <TIM_Base_SetConfig+0x26>
 80011b8:	4a1c      	ldr	r2, [pc, #112]	; (800122c <TIM_Base_SetConfig+0x7c>)
 80011ba:	4290      	cmp	r0, r2
 80011bc:	d00b      	beq.n	80011d6 <TIM_Base_SetConfig+0x26>
 80011be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c2:	4290      	cmp	r0, r2
 80011c4:	d007      	beq.n	80011d6 <TIM_Base_SetConfig+0x26>
 80011c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ca:	4290      	cmp	r0, r2
 80011cc:	d003      	beq.n	80011d6 <TIM_Base_SetConfig+0x26>
 80011ce:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 80011d2:	4290      	cmp	r0, r2
 80011d4:	d116      	bne.n	8001204 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80011d6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 80011e0:	ea43 0302 	orr.w	r3, r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011e4:	d015      	beq.n	8001212 <TIM_Base_SetConfig+0x62>
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <TIM_Base_SetConfig+0x7c>)
 80011e8:	4290      	cmp	r0, r2
 80011ea:	d012      	beq.n	8001212 <TIM_Base_SetConfig+0x62>
 80011ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011f0:	4290      	cmp	r0, r2
 80011f2:	d00e      	beq.n	8001212 <TIM_Base_SetConfig+0x62>
 80011f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011f8:	4290      	cmp	r0, r2
 80011fa:	d00a      	beq.n	8001212 <TIM_Base_SetConfig+0x62>
 80011fc:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8001200:	4290      	cmp	r0, r2
 8001202:	d006      	beq.n	8001212 <TIM_Base_SetConfig+0x62>
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <TIM_Base_SetConfig+0x80>)
 8001206:	4290      	cmp	r0, r2
 8001208:	d003      	beq.n	8001212 <TIM_Base_SetConfig+0x62>
 800120a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800120e:	4290      	cmp	r0, r2
 8001210:	d103      	bne.n	800121a <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001212:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001218:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 800121a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800121c:	688b      	ldr	r3, [r1, #8]
 800121e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001220:	680b      	ldr	r3, [r1, #0]
 8001222:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler */
  TIMx->EGR = TIM_EGR_UG;
 8001224:	2301      	movs	r3, #1
 8001226:	6143      	str	r3, [r0, #20]
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40000400 	.word	0x40000400
 8001230:	40010c00 	.word	0x40010c00

08001234 <HAL_TIM_Base_Init>:
{
 8001234:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001236:	4604      	mov	r4, r0
 8001238:	b1a0      	cbz	r0, 8001264 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800123a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800123e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001242:	b91b      	cbnz	r3, 800124c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001244:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Base_MspInit(htim);
 8001248:	f000 fee2 	bl	8002010 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800124c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800124e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001250:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001254:	1d21      	adds	r1, r4, #4
 8001256:	f7ff ffab 	bl	80011b0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800125a:	2301      	movs	r3, #1
  return HAL_OK;
 800125c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800125e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001262:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001264:	2001      	movs	r0, #1
}
 8001266:	bd10      	pop	{r4, pc}

08001268 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001268:	6803      	ldr	r3, [r0, #0]
}
 800126a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	f042 0201 	orr.w	r2, r2, #1
 8001272:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]
}
 800127c:	4770      	bx	lr

0800127e <HAL_TIM_OC_DelayElapsedCallback>:
 800127e:	4770      	bx	lr

08001280 <HAL_TIM_IC_CaptureCallback>:
 8001280:	4770      	bx	lr

08001282 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001282:	4770      	bx	lr

08001284 <HAL_TIM_TriggerCallback>:
 8001284:	4770      	bx	lr

08001286 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001286:	6803      	ldr	r3, [r0, #0]
{
 8001288:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800128a:	691a      	ldr	r2, [r3, #16]
{
 800128c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800128e:	0791      	lsls	r1, r2, #30
 8001290:	d50e      	bpl.n	80012b0 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	0792      	lsls	r2, r2, #30
 8001296:	d50b      	bpl.n	80012b0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001298:	f06f 0202 	mvn.w	r2, #2
 800129c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800129e:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80012a0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012a2:	7502      	strb	r2, [r0, #20]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80012a4:	0799      	lsls	r1, r3, #30
 80012a6:	d05c      	beq.n	8001362 <HAL_TIM_IRQHandler+0xdc>
          HAL_TIM_IC_CaptureCallback(htim);
 80012a8:	f7ff ffea 	bl	8001280 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ac:	2300      	movs	r3, #0
 80012ae:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	0752      	lsls	r2, r2, #29
 80012b6:	d510      	bpl.n	80012da <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	0750      	lsls	r0, r2, #29
 80012bc:	d50d      	bpl.n	80012da <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012be:	f06f 0204 	mvn.w	r2, #4
 80012c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012c4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80012c6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012c8:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80012ca:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80012ce:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80012d0:	d04d      	beq.n	800136e <HAL_TIM_IRQHandler+0xe8>
        HAL_TIM_IC_CaptureCallback(htim);
 80012d2:	f7ff ffd5 	bl	8001280 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012d6:	2300      	movs	r3, #0
 80012d8:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	0711      	lsls	r1, r2, #28
 80012e0:	d50f      	bpl.n	8001302 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	0712      	lsls	r2, r2, #28
 80012e6:	d50c      	bpl.n	8001302 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012e8:	f06f 0208 	mvn.w	r2, #8
 80012ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012ee:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80012f0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012f2:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80012f4:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80012f6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80012f8:	d03f      	beq.n	800137a <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80012fa:	f7ff ffc1 	bl	8001280 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012fe:	2300      	movs	r3, #0
 8001300:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	06d0      	lsls	r0, r2, #27
 8001308:	d510      	bpl.n	800132c <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	06d1      	lsls	r1, r2, #27
 800130e:	d50d      	bpl.n	800132c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001310:	f06f 0210 	mvn.w	r2, #16
 8001314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001316:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001318:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800131a:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800131c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001320:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001322:	d030      	beq.n	8001386 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 8001324:	f7ff ffac 	bl	8001280 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001328:	2300      	movs	r3, #0
 800132a:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	07d2      	lsls	r2, r2, #31
 8001332:	d508      	bpl.n	8001346 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	07d0      	lsls	r0, r2, #31
 8001338:	d505      	bpl.n	8001346 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800133a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800133e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001340:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001342:	f000 f849 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	0651      	lsls	r1, r2, #25
 800134c:	d508      	bpl.n	8001360 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	0652      	lsls	r2, r2, #25
 8001352:	d505      	bpl.n	8001360 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001354:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001358:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800135a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800135c:	f7ff ff92 	bl	8001284 <HAL_TIM_TriggerCallback>
 8001360:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001362:	f7ff ff8c 	bl	800127e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001366:	4620      	mov	r0, r4
 8001368:	f7ff ff8b 	bl	8001282 <HAL_TIM_PWM_PulseFinishedCallback>
 800136c:	e79e      	b.n	80012ac <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800136e:	f7ff ff86 	bl	800127e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001372:	4620      	mov	r0, r4
 8001374:	f7ff ff85 	bl	8001282 <HAL_TIM_PWM_PulseFinishedCallback>
 8001378:	e7ad      	b.n	80012d6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800137a:	f7ff ff80 	bl	800127e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800137e:	4620      	mov	r0, r4
 8001380:	f7ff ff7f 	bl	8001282 <HAL_TIM_PWM_PulseFinishedCallback>
 8001384:	e7bb      	b.n	80012fe <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001386:	f7ff ff7a 	bl	800127e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff ff79 	bl	8001282 <HAL_TIM_PWM_PulseFinishedCallback>
 8001390:	e7ca      	b.n	8001328 <HAL_TIM_IRQHandler+0xa2>

08001392 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001392:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8001396:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001398:	2b01      	cmp	r3, #1
 800139a:	f04f 0302 	mov.w	r3, #2
 800139e:	d018      	beq.n	80013d2 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80013a0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013a4:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80013a6:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013a8:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80013aa:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013b0:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4322      	orrs	r2, r4
 80013b6:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013be:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  __HAL_UNLOCK(htim);
 80013cc:	2300      	movs	r3, #0
 80013ce:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 80013d2:	4618      	mov	r0, r3

  return HAL_OK;
}
 80013d4:	bd10      	pop	{r4, pc}
	...

080013d8 <HAL_TIM_PeriodElapsedCallback>:
BarId_Typedef bars[4] =
{ LCD_BAR_0, LCD_BAR_1, LCD_BAR_2, LCD_BAR_3 };

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == TIM6)
 80013d8:	6802      	ldr	r2, [r0, #0]
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013dc:	429a      	cmp	r2, r3
 80013de:	d10a      	bne.n	80013f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    counter4++;
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x24>)
//      BSP_LCD_GLASS_DisplayBar(bars[counter4]);
//    }
//    char ch = counter4 + '0';
//    BSP_LCD_GLASS_DisplayChar((uint8_t*) (&ch), POINT_OFF, DOUBLEPOINT_OFF,
//        LCD_DIGIT_POSITION_1);
    HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80013e2:	2140      	movs	r1, #64	; 0x40
    counter4++;
 80013e4:	6813      	ldr	r3, [r2, #0]
    HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x28>)
    counter4++;
 80013e8:	3301      	adds	r3, #1
    if (counter4 > 4)
 80013ea:	2b04      	cmp	r3, #4
      counter4 = 0;
 80013ec:	bfc8      	it	gt
 80013ee:	2300      	movgt	r3, #0
 80013f0:	6013      	str	r3, [r2, #0]
    HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80013f2:	f7ff b842 	b.w	800047a <HAL_GPIO_TogglePin>
 80013f6:	4770      	bx	lr
 80013f8:	40001000 	.word	0x40001000
 80013fc:	20000084 	.word	0x20000084
 8001400:	40020400 	.word	0x40020400

08001404 <HAL_GPIO_EXTI_Callback>:
{
//  if (GPIO_Pin == BTN_Pin)
//  {
//    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
//  }
  if (GPIO_Pin == T_BTN0_Pin)
 8001404:	2801      	cmp	r0, #1
{
 8001406:	b510      	push	{r4, lr}
 8001408:	4604      	mov	r4, r0
  if (GPIO_Pin == T_BTN0_Pin)
 800140a:	d106      	bne.n	800141a <HAL_GPIO_EXTI_Callback+0x16>
    BSP_LCD_GLASS_Clear();
    BSP_LCD_GLASS_DisplayBar(LCD_BAR_0);
  }
  if (GPIO_Pin == T_BTN1_Pin)
    {
      BSP_LCD_GLASS_Clear();
 800140c:	f000 fc34 	bl	8001c78 <BSP_LCD_GLASS_Clear>
      BSP_LCD_GLASS_DisplayBar(LCD_BAR_1);
 8001410:	4620      	mov	r0, r4
    }
}
 8001412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      BSP_LCD_GLASS_DisplayBar(LCD_BAR_1);
 8001416:	f000 bb8b 	b.w	8001b30 <BSP_LCD_GLASS_DisplayBar>
  if (GPIO_Pin == T_BTN1_Pin)
 800141a:	2802      	cmp	r0, #2
 800141c:	d0f6      	beq.n	800140c <HAL_GPIO_EXTI_Callback+0x8>
 800141e:	bd10      	pop	{r4, pc}

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001422:	2400      	movs	r4, #0
{
 8001424:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	2234      	movs	r2, #52	; 0x34
 8001428:	2100      	movs	r1, #0
 800142a:	a809      	add	r0, sp, #36	; 0x24
 800142c:	f000 fec0 	bl	80021b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	2100      	movs	r1, #0
 8001432:	2214      	movs	r2, #20
 8001434:	a804      	add	r0, sp, #16
 8001436:	f000 febb 	bl	80021b0 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <SystemClock_Config+0x70>)
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	9401      	str	r4, [sp, #4]
 800143e:	9402      	str	r4, [sp, #8]
 8001440:	9403      	str	r4, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001442:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001444:	a809      	add	r0, sp, #36	; 0x24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001446:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800144a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800144e:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001450:	2318      	movs	r3, #24
 8001452:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001454:	2301      	movs	r3, #1
 8001456:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001458:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800145a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800145e:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001460:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001462:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f7ff f97e 	bl	8000764 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800146a:	4621      	mov	r1, r4
 800146c:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001470:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001472:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001474:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001476:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001478:	f7ff fd0e 	bl	8000e98 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LCD;
 800147c:	2302      	movs	r3, #2
 800147e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001480:	f44f 3300 	mov.w	r3, #131072	; 0x20000

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001484:	a801      	add	r0, sp, #4
  PeriphClkInit.LCDClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001486:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001488:	f7ff fde4 	bl	8001054 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800148c:	b016      	add	sp, #88	; 0x58
 800148e:	bd10      	pop	{r4, pc}
 8001490:	40007000 	.word	0x40007000

08001494 <main>:
{
 8001494:	b580      	push	{r7, lr}
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : T_BTN2_Pin T_BTN3_Pin */
  GPIO_InitStruct.Pin = T_BTN2_Pin|T_BTN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = T_BTN2_Pin|T_BTN3_Pin;
 8001498:	25c0      	movs	r5, #192	; 0xc0
{
 800149a:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 800149c:	f7fe fe8a 	bl	80001b4 <HAL_Init>
  SystemClock_Config();
 80014a0:	f7ff ffbe 	bl	8001420 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	2214      	movs	r2, #20
 80014a6:	2100      	movs	r1, #0
 80014a8:	a804      	add	r0, sp, #16
 80014aa:	f000 fe81 	bl	80021b0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	4b5c      	ldr	r3, [pc, #368]	; (8001620 <main+0x18c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b0:	4e5c      	ldr	r6, [pc, #368]	; (8001624 <main+0x190>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80014b4:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	f042 0204 	orr.w	r2, r2, #4
 80014ba:	61da      	str	r2, [r3, #28]
 80014bc:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80014be:	485a      	ldr	r0, [pc, #360]	; (8001628 <main+0x194>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	f002 0204 	and.w	r2, r2, #4
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	69da      	ldr	r2, [r3, #28]
  htim6.Init.Period = 2097;
 80014ca:	f640 0731 	movw	r7, #2097	; 0x831
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	61da      	str	r2, [r3, #28]
 80014d4:	69da      	ldr	r2, [r3, #28]
 80014d6:	f002 0201 	and.w	r2, r2, #1
 80014da:	9202      	str	r2, [sp, #8]
 80014dc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	69da      	ldr	r2, [r3, #28]
 80014e0:	f042 0202 	orr.w	r2, r2, #2
 80014e4:	61da      	str	r2, [r3, #28]
 80014e6:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	9303      	str	r3, [sp, #12]
 80014f0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80014f2:	f7fe ffbd 	bl	8000470 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	a904      	add	r1, sp, #16
 80014f8:	484c      	ldr	r0, [pc, #304]	; (800162c <main+0x198>)
  GPIO_InitStruct.Pin = T_BTN2_Pin|T_BTN3_Pin;
 80014fa:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014fc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f7fe fee8 	bl	80002d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_BTN0_Pin T_BTN1_Pin */
  GPIO_InitStruct.Pin = T_BTN0_Pin|T_BTN1_Pin;
 8001504:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	a904      	add	r1, sp, #16
 8001508:	4847      	ldr	r0, [pc, #284]	; (8001628 <main+0x194>)
  GPIO_InitStruct.Pin = T_BTN0_Pin|T_BTN1_Pin;
 800150a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f7fe fee0 	bl	80002d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	a904      	add	r1, sp, #16
 8001518:	4843      	ldr	r0, [pc, #268]	; (8001628 <main+0x194>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin;
 800151c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f7fe fed7 	bl	80002d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001526:	4622      	mov	r2, r4
 8001528:	4621      	mov	r1, r4
 800152a:	2006      	movs	r0, #6
 800152c:	f7fe fe7c 	bl	8000228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001530:	2006      	movs	r0, #6
 8001532:	f7fe fead 	bl	8000290 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001536:	4622      	mov	r2, r4
 8001538:	4621      	mov	r1, r4
 800153a:	2007      	movs	r0, #7
 800153c:	f7fe fe74 	bl	8000228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001540:	2007      	movs	r0, #7
 8001542:	f7fe fea5 	bl	8000290 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001546:	4621      	mov	r1, r4
 8001548:	4622      	mov	r2, r4
 800154a:	2017      	movs	r0, #23
 800154c:	f7fe fe6c 	bl	8000228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001550:	2017      	movs	r0, #23
 8001552:	f7fe fe9d 	bl	8000290 <HAL_NVIC_EnableIRQ>
  hlcd.Instance = LCD;
 8001556:	4836      	ldr	r0, [pc, #216]	; (8001630 <main+0x19c>)
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <main+0x1a0>)
  hlcd.Init.Divider = LCD_DIVIDER_16;
 800155a:	6084      	str	r4, [r0, #8]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800155c:	e880 0018 	stmia.w	r0, {r3, r4}
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8001560:	230c      	movs	r3, #12
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8001562:	6104      	str	r4, [r0, #16]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8001564:	60c3      	str	r3, [r0, #12]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8001566:	6144      	str	r4, [r0, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8001568:	6184      	str	r4, [r0, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800156a:	61c4      	str	r4, [r0, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 800156c:	6204      	str	r4, [r0, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 800156e:	6304      	str	r4, [r0, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8001570:	6284      	str	r4, [r0, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8001572:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8001574:	f7ff f842 	bl	80005fc <HAL_LCD_Init>
  htim6.Init.Prescaler = 1000;
 8001578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim6.Instance = TIM6;
 800157c:	4d2e      	ldr	r5, [pc, #184]	; (8001638 <main+0x1a4>)
  htim6.Init.Prescaler = 1000;
 800157e:	4a2f      	ldr	r2, [pc, #188]	; (800163c <main+0x1a8>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001580:	4628      	mov	r0, r5
  htim6.Init.Prescaler = 1000;
 8001582:	e885 000c 	stmia.w	r5, {r2, r3}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001586:	60ac      	str	r4, [r5, #8]
  htim6.Init.Period = 2097;
 8001588:	60ef      	str	r7, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158a:	9404      	str	r4, [sp, #16]
 800158c:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800158e:	f7ff fe51 	bl	8001234 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001592:	a904      	add	r1, sp, #16
 8001594:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800159a:	f7ff fefa 	bl	8001392 <HAL_TIMEx_MasterConfigSynchronization>
  htim7.Init.Prescaler = 100;
 800159e:	2364      	movs	r3, #100	; 0x64
  htim7.Instance = TIM7;
 80015a0:	4e27      	ldr	r6, [pc, #156]	; (8001640 <main+0x1ac>)
  htim7.Init.Prescaler = 100;
 80015a2:	4928      	ldr	r1, [pc, #160]	; (8001644 <main+0x1b0>)
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015a4:	4630      	mov	r0, r6
  htim7.Init.Prescaler = 100;
 80015a6:	e886 000a 	stmia.w	r6, {r1, r3}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015aa:	9404      	str	r4, [sp, #16]
 80015ac:	9405      	str	r4, [sp, #20]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	60b4      	str	r4, [r6, #8]
  htim7.Init.Period = 2097;
 80015b0:	60f7      	str	r7, [r6, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015b2:	f7ff fe3f 	bl	8001234 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015b6:	a904      	add	r1, sp, #16
 80015b8:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015be:	f7ff fee8 	bl	8001392 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim6);
 80015c2:	4628      	mov	r0, r5
 80015c4:	f7ff fe50 	bl	8001268 <HAL_TIM_Base_Start_IT>
  counter_ch = (uint8_t*) malloc((size_t) sizeof(char) * 6);
 80015c8:	2006      	movs	r0, #6
 80015ca:	f000 fde9 	bl	80021a0 <malloc>
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <main+0x1b4>)
 80015d0:	6018      	str	r0, [r3, #0]
  BSP_LCD_GLASS_Init();
 80015d2:	f000 fb69 	bl	8001ca8 <BSP_LCD_GLASS_Init>
  BSP_LCD_GLASS_Contrast(LCD_CONTRASTLEVEL_7);
 80015d6:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
 80015da:	f000 fa9d 	bl	8001b18 <BSP_LCD_GLASS_Contrast>
  char sentense[] = "      HI! MY NAME IS KRAFTWERK28      ";
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <main+0x1b8>)
 80015e0:	aa04      	add	r2, sp, #16
 80015e2:	f103 0520 	add.w	r5, r3, #32
 80015e6:	4614      	mov	r4, r2
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	3308      	adds	r3, #8
 80015ee:	c403      	stmia	r4!, {r0, r1}
 80015f0:	42ab      	cmp	r3, r5
 80015f2:	4622      	mov	r2, r4
 80015f4:	d1f7      	bne.n	80015e6 <main+0x152>
 80015f6:	8899      	ldrh	r1, [r3, #4]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	799b      	ldrb	r3, [r3, #6]
 80015fc:	6020      	str	r0, [r4, #0]
 80015fe:	80a1      	strh	r1, [r4, #4]
 8001600:	71a3      	strb	r3, [r4, #6]
      strlen((const char*) (&sentense)),
 8001602:	a804      	add	r0, sp, #16
 8001604:	f7fe fdba 	bl	800017c <strlen>
  BSP_LCD_GLASS_ScrollSentence((uint8_t*) (&sentense),
 8001608:	2296      	movs	r2, #150	; 0x96
 800160a:	b281      	uxth	r1, r0
 800160c:	a804      	add	r0, sp, #16
 800160e:	f000 fbed 	bl	8001dec <BSP_LCD_GLASS_ScrollSentence>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	4804      	ldr	r0, [pc, #16]	; (8001628 <main+0x194>)
 8001618:	f7fe ff2a 	bl	8000470 <HAL_GPIO_WritePin>
 800161c:	e7fe      	b.n	800161c <main+0x188>
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	10110000 	.word	0x10110000
 8001628:	40020400 	.word	0x40020400
 800162c:	40020000 	.word	0x40020000
 8001630:	200000dc 	.word	0x200000dc
 8001634:	40002400 	.word	0x40002400
 8001638:	200000a4 	.word	0x200000a4
 800163c:	40001000 	.word	0x40001000
 8001640:	20000118 	.word	0x20000118
 8001644:	40001400 	.word	0x40001400
 8001648:	20000088 	.word	0x20000088
 800164c:	080022d4 	.word	0x080022d4

08001650 <WriteChar.isra.2>:
static void Convert(uint8_t* Char, Point_Typedef Point, DoublePoint_Typedef Colon)
{
  uint16_t ch = 0 ;
  uint8_t loop = 0, index = 0;

  switch (*Char)
 8001650:	282d      	cmp	r0, #45	; 0x2d
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t* ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
 8001652:	b570      	push	{r4, r5, r6, lr}
  switch (*Char)
 8001654:	d063      	beq.n	800171e <WriteChar.isra.2+0xce>
 8001656:	d820      	bhi.n	800169a <WriteChar.isra.2+0x4a>
 8001658:	2828      	cmp	r0, #40	; 0x28
 800165a:	d056      	beq.n	800170a <WriteChar.isra.2+0xba>
 800165c:	d815      	bhi.n	800168a <WriteChar.isra.2+0x3a>
 800165e:	2820      	cmp	r0, #32
 8001660:	d068      	beq.n	8001734 <WriteChar.isra.2+0xe4>
 8001662:	2825      	cmp	r0, #37	; 0x25
 8001664:	d060      	beq.n	8001728 <WriteChar.isra.2+0xd8>
      if ( (*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL) )
 8001666:	f1a0 0441 	sub.w	r4, r0, #65	; 0x41
 800166a:	b2e5      	uxtb	r5, r4
 800166c:	2d19      	cmp	r5, #25
        ch = CapLetterMap[*Char - 'A'];
 800166e:	bf98      	it	ls
 8001670:	4dcc      	ldrls	r5, [pc, #816]	; (80019a4 <WriteChar.isra.2+0x354>)
      if ( (*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && ( *Char > ASCII_CHAR_APOSTROPHE) )
 8001672:	f1a0 0061 	sub.w	r0, r0, #97	; 0x61
        ch = CapLetterMap[*Char - 'A'];
 8001676:	bf98      	it	ls
 8001678:	f835 4014 	ldrhls.w	r4, [r5, r4, lsl #1]
      if ( (*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && ( *Char > ASCII_CHAR_APOSTROPHE) )
 800167c:	b2c5      	uxtb	r5, r0
  uint16_t ch = 0 ;
 800167e:	bf88      	it	hi
 8001680:	2400      	movhi	r4, #0
      if ( (*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && ( *Char > ASCII_CHAR_APOSTROPHE) )
 8001682:	2d19      	cmp	r5, #25
 8001684:	d821      	bhi.n	80016ca <WriteChar.isra.2+0x7a>
        ch = CapLetterMap[*Char - 'a'];
 8001686:	4cc7      	ldr	r4, [pc, #796]	; (80019a4 <WriteChar.isra.2+0x354>)
 8001688:	e011      	b.n	80016ae <WriteChar.isra.2+0x5e>
  switch (*Char)
 800168a:	282a      	cmp	r0, #42	; 0x2a
 800168c:	d01b      	beq.n	80016c6 <WriteChar.isra.2+0x76>
 800168e:	d33e      	bcc.n	800170e <WriteChar.isra.2+0xbe>
 8001690:	282b      	cmp	r0, #43	; 0x2b
 8001692:	d1e8      	bne.n	8001666 <WriteChar.isra.2+0x16>
      ch = C_PLUS;
 8001694:	f24a 0414 	movw	r4, #40980	; 0xa014
 8001698:	e017      	b.n	80016ca <WriteChar.isra.2+0x7a>
  switch (*Char)
 800169a:	2864      	cmp	r0, #100	; 0x64
 800169c:	d039      	beq.n	8001712 <WriteChar.isra.2+0xc2>
 800169e:	d809      	bhi.n	80016b4 <WriteChar.isra.2+0x64>
 80016a0:	282f      	cmp	r0, #47	; 0x2f
 80016a2:	d03f      	beq.n	8001724 <WriteChar.isra.2+0xd4>
 80016a4:	d3df      	bcc.n	8001666 <WriteChar.isra.2+0x16>
 80016a6:	2839      	cmp	r0, #57	; 0x39
 80016a8:	d8dd      	bhi.n	8001666 <WriteChar.isra.2+0x16>
      ch = NumberMap[*Char - ASCII_CHAR_0];
 80016aa:	4cbf      	ldr	r4, [pc, #764]	; (80019a8 <WriteChar.isra.2+0x358>)
 80016ac:	3830      	subs	r0, #48	; 0x30
        ch = CapLetterMap[*Char - 'a'];
 80016ae:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
 80016b2:	e00a      	b.n	80016ca <WriteChar.isra.2+0x7a>
  switch (*Char)
 80016b4:	286e      	cmp	r0, #110	; 0x6e
 80016b6:	d02f      	beq.n	8001718 <WriteChar.isra.2+0xc8>
 80016b8:	28ff      	cmp	r0, #255	; 0xff
 80016ba:	d038      	beq.n	800172e <WriteChar.isra.2+0xde>
 80016bc:	286d      	cmp	r0, #109	; 0x6d
 80016be:	d1d2      	bne.n	8001666 <WriteChar.isra.2+0x16>
      ch = C_MMAP;
 80016c0:	f24b 2410 	movw	r4, #45584	; 0xb210
 80016c4:	e001      	b.n	80016ca <WriteChar.isra.2+0x7a>
      ch = C_STAR;
 80016c6:	f24a 04dd 	movw	r4, #41181	; 0xa0dd
  if (Point == POINT_ON)
 80016ca:	2901      	cmp	r1, #1
    ch |= 0x0002;
 80016cc:	bf08      	it	eq
 80016ce:	f044 0402 	orreq.w	r4, r4, #2
  if (Colon == DOUBLEPOINT_ON)
 80016d2:	2a01      	cmp	r2, #1
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 80016d4:	49b5      	ldr	r1, [pc, #724]	; (80019ac <WriteChar.isra.2+0x35c>)
    ch |= 0x0020;
 80016d6:	bf08      	it	eq
 80016d8:	f044 0420 	orreq.w	r4, r4, #32
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 80016dc:	f3c4 2003 	ubfx	r0, r4, #8, #4
 80016e0:	1322      	asrs	r2, r4, #12
 80016e2:	6048      	str	r0, [r1, #4]
 80016e4:	f3c4 1003 	ubfx	r0, r4, #4, #4
 80016e8:	f004 040f 	and.w	r4, r4, #15
 80016ec:	60cc      	str	r4, [r1, #12]
 80016ee:	600a      	str	r2, [r1, #0]
 80016f0:	6088      	str	r0, [r1, #8]
 80016f2:	460c      	mov	r4, r1
{
  uint32_t data =0x00;
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);

  switch (Position)
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	f200 820b 	bhi.w	8001b10 <WriteChar.isra.2+0x4c0>
 80016fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80016fe:	001d      	.short	0x001d
 8001700:	00ae005e 	.word	0x00ae005e
 8001704:	01610102 	.word	0x01610102
 8001708:	01b5      	.short	0x01b5
      ch = C_OPENPARMAP;
 800170a:	4604      	mov	r4, r0
 800170c:	e7dd      	b.n	80016ca <WriteChar.isra.2+0x7a>
      ch = C_CLOSEPARMAP;
 800170e:	2411      	movs	r4, #17
 8001710:	e7db      	b.n	80016ca <WriteChar.isra.2+0x7a>
      ch = C_DMAP;
 8001712:	f44f 4473 	mov.w	r4, #62208	; 0xf300
 8001716:	e7d8      	b.n	80016ca <WriteChar.isra.2+0x7a>
      ch = C_NMAP;
 8001718:	f242 2410 	movw	r4, #8720	; 0x2210
 800171c:	e7d5      	b.n	80016ca <WriteChar.isra.2+0x7a>
      ch = C_MINUS;
 800171e:	f44f 4420 	mov.w	r4, #40960	; 0xa000
 8001722:	e7d2      	b.n	80016ca <WriteChar.isra.2+0x7a>
      ch = C_SLATCH;
 8001724:	24c0      	movs	r4, #192	; 0xc0
 8001726:	e7d0      	b.n	80016ca <WriteChar.isra.2+0x7a>
      ch = C_PERCENT_2;
 8001728:	f44f 4433 	mov.w	r4, #45824	; 0xb300
 800172c:	e7cd      	b.n	80016ca <WriteChar.isra.2+0x7a>
      ch = C_FULL;
 800172e:	f64f 74dd 	movw	r4, #65501	; 0xffdd
 8001732:	e7ca      	b.n	80016ca <WriteChar.isra.2+0x7a>
      ch = 0x00;
 8001734:	2400      	movs	r4, #0
 8001736:	e7c8      	b.n	80016ca <WriteChar.isra.2+0x7a>
  {
    /* Position 1 on LCD (Digit1)*/
    case LCD_DIGIT_POSITION_1:
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8001738:	0691      	lsls	r1, r2, #26
 800173a:	0693      	lsls	r3, r2, #26
 800173c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001740:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001744:	4319      	orrs	r1, r3
 8001746:	f002 0303 	and.w	r3, r2, #3
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 800174a:	430b      	orrs	r3, r1
 800174c:	4a98      	ldr	r2, [pc, #608]	; (80019b0 <WriteChar.isra.2+0x360>)
 800174e:	2100      	movs	r1, #0
 8001750:	4898      	ldr	r0, [pc, #608]	; (80019b4 <WriteChar.isra.2+0x364>)
 8001752:	f7fe fea3 	bl	800049c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001756:	6862      	ldr	r2, [r4, #4]
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8001758:	4896      	ldr	r0, [pc, #600]	; (80019b4 <WriteChar.isra.2+0x364>)
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 800175a:	0693      	lsls	r3, r2, #26
 800175c:	0691      	lsls	r1, r2, #26
 800175e:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001766:	430b      	orrs	r3, r1
 8001768:	f002 0203 	and.w	r2, r2, #3
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800176c:	4313      	orrs	r3, r2
 800176e:	2102      	movs	r1, #2
 8001770:	4a8f      	ldr	r2, [pc, #572]	; (80019b0 <WriteChar.isra.2+0x360>)
 8001772:	f7fe fe93 	bl	800049c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001776:	68a2      	ldr	r2, [r4, #8]
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001778:	488e      	ldr	r0, [pc, #568]	; (80019b4 <WriteChar.isra.2+0x364>)
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 800177a:	0693      	lsls	r3, r2, #26
 800177c:	0691      	lsls	r1, r2, #26
 800177e:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001786:	430b      	orrs	r3, r1
 8001788:	f002 0203 	and.w	r2, r2, #3
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800178c:	4313      	orrs	r3, r2
 800178e:	2104      	movs	r1, #4
 8001790:	4a87      	ldr	r2, [pc, #540]	; (80019b0 <WriteChar.isra.2+0x360>)
 8001792:	f7fe fe83 	bl	800049c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001796:	68e2      	ldr	r2, [r4, #12]
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8001798:	0693      	lsls	r3, r2, #26
 800179a:	0691      	lsls	r1, r2, #26
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80017a4:	f002 0203 	and.w	r2, r2, #3
 80017a8:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80017aa:	4313      	orrs	r3, r2
 80017ac:	4a80      	ldr	r2, [pc, #512]	; (80019b0 <WriteChar.isra.2+0x360>)
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80017ae:	2106      	movs	r1, #6
      break;

     default:
      break;
  }
}
 80017b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80017b4:	487f      	ldr	r0, [pc, #508]	; (80019b4 <WriteChar.isra.2+0x364>)
 80017b6:	f7fe be71 	b.w	800049c <HAL_LCD_Write>
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80017ba:	0851      	lsrs	r1, r2, #1
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80017bc:	0613      	lsls	r3, r2, #24
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80017be:	01c9      	lsls	r1, r1, #7
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80017c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80017c4:	b2c9      	uxtb	r1, r1
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80017c6:	4319      	orrs	r1, r3
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80017c8:	0093      	lsls	r3, r2, #2
 80017ca:	f003 0304 	and.w	r3, r3, #4
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80017ce:	4319      	orrs	r1, r3
 80017d0:	0613      	lsls	r3, r2, #24
 80017d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80017d6:	430b      	orrs	r3, r1
 80017d8:	4a77      	ldr	r2, [pc, #476]	; (80019b8 <WriteChar.isra.2+0x368>)
 80017da:	2100      	movs	r1, #0
 80017dc:	4875      	ldr	r0, [pc, #468]	; (80019b4 <WriteChar.isra.2+0x364>)
 80017de:	f7fe fe5d 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80017e2:	6861      	ldr	r1, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80017e4:	4873      	ldr	r0, [pc, #460]	; (80019b4 <WriteChar.isra.2+0x364>)
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80017e6:	084a      	lsrs	r2, r1, #1
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80017e8:	060b      	lsls	r3, r1, #24
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80017ea:	01d2      	lsls	r2, r2, #7
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80017ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80017f0:	b2d2      	uxtb	r2, r2
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80017f2:	431a      	orrs	r2, r3
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80017f4:	008b      	lsls	r3, r1, #2
 80017f6:	f003 0304 	and.w	r3, r3, #4
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80017fa:	431a      	orrs	r2, r3
 80017fc:	060b      	lsls	r3, r1, #24
 80017fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8001802:	4313      	orrs	r3, r2
 8001804:	2102      	movs	r1, #2
 8001806:	4a6c      	ldr	r2, [pc, #432]	; (80019b8 <WriteChar.isra.2+0x368>)
 8001808:	f7fe fe48 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 800180c:	68a1      	ldr	r1, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800180e:	4869      	ldr	r0, [pc, #420]	; (80019b4 <WriteChar.isra.2+0x364>)
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001810:	084a      	lsrs	r2, r1, #1
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8001812:	060b      	lsls	r3, r1, #24
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001814:	01d2      	lsls	r2, r2, #7
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8001816:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 800181a:	b2d2      	uxtb	r2, r2
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 800181c:	431a      	orrs	r2, r3
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 800181e:	008b      	lsls	r3, r1, #2
 8001820:	f003 0304 	and.w	r3, r3, #4
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8001824:	431a      	orrs	r2, r3
 8001826:	060b      	lsls	r3, r1, #24
 8001828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800182c:	4313      	orrs	r3, r2
 800182e:	2104      	movs	r1, #4
 8001830:	4a61      	ldr	r2, [pc, #388]	; (80019b8 <WriteChar.isra.2+0x368>)
 8001832:	f7fe fe33 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001836:	68e1      	ldr	r1, [r4, #12]
 8001838:	084a      	lsrs	r2, r1, #1
 800183a:	01d2      	lsls	r2, r2, #7
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 800183c:	060b      	lsls	r3, r1, #24
 800183e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001842:	b2d2      	uxtb	r2, r2
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8001844:	431a      	orrs	r2, r3
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001846:	008b      	lsls	r3, r1, #2
 8001848:	f003 0304 	and.w	r3, r3, #4
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 800184c:	431a      	orrs	r2, r3
 800184e:	060b      	lsls	r3, r1, #24
 8001850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8001854:	4313      	orrs	r3, r2
 8001856:	4a58      	ldr	r2, [pc, #352]	; (80019b8 <WriteChar.isra.2+0x368>)
 8001858:	e7a9      	b.n	80017ae <WriteChar.isra.2+0x15e>
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 800185a:	0211      	lsls	r1, r2, #8
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 800185c:	0593      	lsls	r3, r2, #22
 800185e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001862:	f401 7100 	and.w	r1, r1, #512	; 0x200
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8001866:	4319      	orrs	r1, r3
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001868:	0213      	lsls	r3, r2, #8
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 800186e:	4319      	orrs	r1, r3
 8001870:	0593      	lsls	r3, r2, #22
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0, LCD_DIGIT3_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8001876:	430b      	orrs	r3, r1
 8001878:	f06f 2203 	mvn.w	r2, #50332416	; 0x3000300
 800187c:	2100      	movs	r1, #0
 800187e:	484d      	ldr	r0, [pc, #308]	; (80019b4 <WriteChar.isra.2+0x364>)
 8001880:	f7fe fe0c 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001884:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8001886:	484b      	ldr	r0, [pc, #300]	; (80019b4 <WriteChar.isra.2+0x364>)
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001888:	0213      	lsls	r3, r2, #8
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 800188a:	0591      	lsls	r1, r2, #22
 800188c:	f001 7180 	and.w	r1, r1, #16777216	; 0x1000000
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001890:	f403 7300 	and.w	r3, r3, #512	; 0x200
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8001894:	430b      	orrs	r3, r1
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001896:	0211      	lsls	r1, r2, #8
 8001898:	f401 7180 	and.w	r1, r1, #256	; 0x100
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 800189c:	0592      	lsls	r2, r2, #22
 800189e:	430b      	orrs	r3, r1
 80018a0:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80018a4:	4313      	orrs	r3, r2
 80018a6:	2102      	movs	r1, #2
 80018a8:	f06f 2203 	mvn.w	r2, #50332416	; 0x3000300
 80018ac:	f7fe fdf6 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80018b0:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80018b2:	4840      	ldr	r0, [pc, #256]	; (80019b4 <WriteChar.isra.2+0x364>)
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80018b4:	0213      	lsls	r3, r2, #8
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80018b6:	0591      	lsls	r1, r2, #22
 80018b8:	f001 7180 	and.w	r1, r1, #16777216	; 0x1000000
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80018bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80018c0:	430b      	orrs	r3, r1
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80018c2:	0211      	lsls	r1, r2, #8
 80018c4:	f401 7180 	and.w	r1, r1, #256	; 0x100
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80018c8:	0592      	lsls	r2, r2, #22
 80018ca:	430b      	orrs	r3, r1
 80018cc:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80018d0:	4313      	orrs	r3, r2
 80018d2:	2104      	movs	r1, #4
 80018d4:	f06f 2203 	mvn.w	r2, #50332416	; 0x3000300
 80018d8:	f7fe fde0 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80018dc:	68e2      	ldr	r2, [r4, #12]
 80018de:	0213      	lsls	r3, r2, #8
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80018e0:	0591      	lsls	r1, r2, #22
 80018e2:	f001 7180 	and.w	r1, r1, #16777216	; 0x1000000
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80018e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80018ea:	430b      	orrs	r3, r1
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80018ec:	0211      	lsls	r1, r2, #8
 80018ee:	f401 7180 	and.w	r1, r1, #256	; 0x100
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80018f2:	0592      	lsls	r2, r2, #22
 80018f4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80018f8:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3, LCD_DIGIT3_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80018fa:	4313      	orrs	r3, r2
 80018fc:	f06f 2203 	mvn.w	r2, #50332416	; 0x3000300
 8001900:	e755      	b.n	80017ae <WriteChar.isra.2+0x15e>
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 8001902:	0291      	lsls	r1, r2, #10
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8001904:	0493      	lsls	r3, r2, #18
 8001906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 800190a:	f401 6100 	and.w	r1, r1, #2048	; 0x800
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800190e:	4319      	orrs	r1, r3
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 8001910:	0293      	lsls	r3, r2, #10
 8001912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8001916:	4319      	orrs	r1, r3
 8001918:	0493      	lsls	r3, r2, #18
 800191a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 800191e:	430b      	orrs	r3, r1
 8001920:	4a26      	ldr	r2, [pc, #152]	; (80019bc <WriteChar.isra.2+0x36c>)
 8001922:	2100      	movs	r1, #0
 8001924:	4823      	ldr	r0, [pc, #140]	; (80019b4 <WriteChar.isra.2+0x364>)
 8001926:	f7fe fdb9 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 800192a:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800192c:	4821      	ldr	r0, [pc, #132]	; (80019b4 <WriteChar.isra.2+0x364>)
      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 800192e:	0293      	lsls	r3, r2, #10
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8001930:	0491      	lsls	r1, r2, #18
 8001932:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 8001936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800193a:	430b      	orrs	r3, r1
      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 800193c:	0291      	lsls	r1, r2, #10
 800193e:	f401 6180 	and.w	r1, r1, #1024	; 0x400
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8001942:	0492      	lsls	r2, r2, #18
 8001944:	430b      	orrs	r3, r1
 8001946:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800194a:	4313      	orrs	r3, r2
 800194c:	2102      	movs	r1, #2
 800194e:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <WriteChar.isra.2+0x36c>)
 8001950:	f7fe fda4 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 8001954:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001956:	4817      	ldr	r0, [pc, #92]	; (80019b4 <WriteChar.isra.2+0x364>)
      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 8001958:	0293      	lsls	r3, r2, #10
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800195a:	0491      	lsls	r1, r2, #18
 800195c:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 8001960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8001964:	430b      	orrs	r3, r1
      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 8001966:	0291      	lsls	r1, r2, #10
 8001968:	f401 6180 	and.w	r1, r1, #1024	; 0x400
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800196c:	0492      	lsls	r2, r2, #18
 800196e:	430b      	orrs	r3, r1
 8001970:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001974:	4313      	orrs	r3, r2
 8001976:	2104      	movs	r1, #4
 8001978:	4a10      	ldr	r2, [pc, #64]	; (80019bc <WriteChar.isra.2+0x36c>)
 800197a:	f7fe fd8f 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 800197e:	68e2      	ldr	r2, [r4, #12]
 8001980:	0293      	lsls	r3, r2, #10
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8001982:	0491      	lsls	r1, r2, #18
 8001984:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 8001988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800198c:	430b      	orrs	r3, r1
      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT)
 800198e:	0291      	lsls	r1, r2, #10
 8001990:	f401 6180 	and.w	r1, r1, #1024	; 0x400
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8001994:	0492      	lsls	r2, r2, #18
 8001996:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800199a:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800199c:	4313      	orrs	r3, r2
 800199e:	4a07      	ldr	r2, [pc, #28]	; (80019bc <WriteChar.isra.2+0x36c>)
 80019a0:	e705      	b.n	80017ae <WriteChar.isra.2+0x15e>
 80019a2:	bf00      	nop
 80019a4:	080022fc 	.word	0x080022fc
 80019a8:	08002330 	.word	0x08002330
 80019ac:	20000150 	.word	0x20000150
 80019b0:	cffffffc 	.word	0xcffffffc
 80019b4:	20000160 	.word	0x20000160
 80019b8:	f3ffff7b 	.word	0xf3ffff7b
 80019bc:	ffdffbff 	.word	0xffdffbff
      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 80019c0:	0311      	lsls	r1, r2, #12
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80019c2:	0413      	lsls	r3, r2, #16
 80019c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 80019c8:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80019cc:	4319      	orrs	r1, r3
      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 80019ce:	0313      	lsls	r3, r2, #12
 80019d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80019d4:	4319      	orrs	r1, r3
 80019d6:	0413      	lsls	r3, r2, #16
 80019d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80019dc:	430b      	orrs	r3, r1
 80019de:	f46f 2284 	mvn.w	r2, #270336	; 0x42000
 80019e2:	2100      	movs	r1, #0
 80019e4:	484b      	ldr	r0, [pc, #300]	; (8001b14 <WriteChar.isra.2+0x4c4>)
 80019e6:	f7fe fd59 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 80019ea:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80019ec:	4849      	ldr	r0, [pc, #292]	; (8001b14 <WriteChar.isra.2+0x4c4>)
      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 80019ee:	0313      	lsls	r3, r2, #12
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80019f0:	0411      	lsls	r1, r2, #16
 80019f2:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 80019f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80019fa:	430b      	orrs	r3, r1
      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 80019fc:	0311      	lsls	r1, r2, #12
 80019fe:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8001a02:	0412      	lsls	r2, r2, #16
 8001a04:	430b      	orrs	r3, r1
 8001a06:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	f46f 2284 	mvn.w	r2, #270336	; 0x42000
 8001a12:	f7fe fd43 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 8001a16:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001a18:	483e      	ldr	r0, [pc, #248]	; (8001b14 <WriteChar.isra.2+0x4c4>)
      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 8001a1a:	0313      	lsls	r3, r2, #12
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8001a1c:	0411      	lsls	r1, r2, #16
 8001a1e:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 8001a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8001a26:	430b      	orrs	r3, r1
      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 8001a28:	0311      	lsls	r1, r2, #12
 8001a2a:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8001a2e:	0412      	lsls	r2, r2, #16
 8001a30:	430b      	orrs	r3, r1
 8001a32:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001a36:	4313      	orrs	r3, r2
 8001a38:	2104      	movs	r1, #4
 8001a3a:	f46f 2284 	mvn.w	r2, #270336	; 0x42000
 8001a3e:	f7fe fd2d 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 8001a42:	68e2      	ldr	r2, [r4, #12]
 8001a44:	0313      	lsls	r3, r2, #12
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8001a46:	0411      	lsls	r1, r2, #16
 8001a48:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 8001a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8001a50:	430b      	orrs	r3, r1
      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT)
 8001a52:	0311      	lsls	r1, r2, #12
 8001a54:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8001a58:	0412      	lsls	r2, r2, #16
 8001a5a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001a5e:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8001a60:	4313      	orrs	r3, r2
 8001a62:	f46f 2284 	mvn.w	r2, #270336	; 0x42000
 8001a66:	e6a2      	b.n	80017ae <WriteChar.isra.2+0x15e>
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001a68:	0393      	lsls	r3, r2, #14
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001a6a:	03d1      	lsls	r1, r2, #15
 8001a6c:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001a74:	430b      	orrs	r3, r1
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001a76:	0391      	lsls	r1, r2, #14
 8001a78:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001a7c:	0352      	lsls	r2, r2, #13
 8001a7e:	430b      	orrs	r3, r1
 8001a80:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8001a84:	4313      	orrs	r3, r2
 8001a86:	2100      	movs	r1, #0
 8001a88:	f46f 3270 	mvn.w	r2, #245760	; 0x3c000
 8001a8c:	4821      	ldr	r0, [pc, #132]	; (8001b14 <WriteChar.isra.2+0x4c4>)
 8001a8e:	f7fe fd05 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001a92:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8001a94:	481f      	ldr	r0, [pc, #124]	; (8001b14 <WriteChar.isra.2+0x4c4>)
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001a96:	0393      	lsls	r3, r2, #14
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001a98:	03d1      	lsls	r1, r2, #15
 8001a9a:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001aa2:	430b      	orrs	r3, r1
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001aa4:	0391      	lsls	r1, r2, #14
 8001aa6:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001aaa:	0352      	lsls	r2, r2, #13
 8001aac:	430b      	orrs	r3, r1
 8001aae:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	f46f 3270 	mvn.w	r2, #245760	; 0x3c000
 8001aba:	f7fe fcef 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001abe:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001ac0:	4814      	ldr	r0, [pc, #80]	; (8001b14 <WriteChar.isra.2+0x4c4>)
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001ac2:	0393      	lsls	r3, r2, #14
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001ac4:	03d1      	lsls	r1, r2, #15
 8001ac6:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001ace:	430b      	orrs	r3, r1
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001ad0:	0391      	lsls	r1, r2, #14
 8001ad2:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001ad6:	0352      	lsls	r2, r2, #13
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	f46f 3270 	mvn.w	r2, #245760	; 0x3c000
 8001ae6:	f7fe fcd9 	bl	800049c <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001aea:	68e2      	ldr	r2, [r4, #12]
 8001aec:	0393      	lsls	r3, r2, #14
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001aee:	03d1      	lsls	r1, r2, #15
 8001af0:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001af8:	430b      	orrs	r3, r1
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8001afa:	0391      	lsls	r1, r2, #14
 8001afc:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8001b00:	0352      	lsls	r2, r2, #13
 8001b02:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8001b06:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	f46f 3270 	mvn.w	r2, #245760	; 0x3c000
 8001b0e:	e64e      	b.n	80017ae <WriteChar.isra.2+0x15e>
 8001b10:	bd70      	pop	{r4, r5, r6, pc}
 8001b12:	bf00      	nop
 8001b14:	20000160 	.word	0x20000160

08001b18 <BSP_LCD_GLASS_Contrast>:
  __HAL_LCD_CONTRAST_CONFIG(&LCDHandle, Contrast);
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <BSP_LCD_GLASS_Contrast+0x14>)
 8001b1a:	6811      	ldr	r1, [r2, #0]
 8001b1c:	684b      	ldr	r3, [r1, #4]
 8001b1e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b22:	4318      	orrs	r0, r3
 8001b24:	6048      	str	r0, [r1, #4]
 8001b26:	4610      	mov	r0, r2
 8001b28:	f7fe bd53 	b.w	80005d2 <LCD_WaitForSynchro>
 8001b2c:	20000160 	.word	0x20000160

08001b30 <BSP_LCD_GLASS_DisplayBar>:
{
 8001b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b34:	4606      	mov	r6, r0
  uint32_t position = 0;
 8001b36:	2400      	movs	r4, #0
        HAL_LCD_Write(&LCDHandle, LCD_BAR1_3_COM, ~(LCD_BAR3_SEG), LCD_BAR3_SEG);
 8001b38:	4d23      	ldr	r5, [pc, #140]	; (8001bc8 <BSP_LCD_GLASS_DisplayBar+0x98>)
        b3 = 1;
 8001b3a:	4f24      	ldr	r7, [pc, #144]	; (8001bcc <BSP_LCD_GLASS_DisplayBar+0x9c>)
        b2 = 1;
 8001b3c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001bd8 <BSP_LCD_GLASS_DisplayBar+0xa8>
  while ((BarId) >> position)
 8001b40:	fa36 f304 	lsrs.w	r3, r6, r4
 8001b44:	d104      	bne.n	8001b50 <BSP_LCD_GLASS_DisplayBar+0x20>
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8001b46:	4820      	ldr	r0, [pc, #128]	; (8001bc8 <BSP_LCD_GLASS_DisplayBar+0x98>)
}
 8001b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8001b4c:	f7fe bce5 	b.w	800051a <HAL_LCD_UpdateDisplayRequest>
    switch(BarId & (1 << position))
 8001b50:	2301      	movs	r3, #1
 8001b52:	40a3      	lsls	r3, r4
 8001b54:	4033      	ands	r3, r6
 8001b56:	3b01      	subs	r3, #1
 8001b58:	2b07      	cmp	r3, #7
 8001b5a:	d810      	bhi.n	8001b7e <BSP_LCD_GLASS_DisplayBar+0x4e>
 8001b5c:	e8df f003 	tbb	[pc, r3]
 8001b60:	1c0f1104 	.word	0x1c0f1104
 8001b64:	280f0f0f 	.word	0x280f0f0f
        HAL_LCD_Write(&LCDHandle, LCD_BAR0_2_COM, ~(LCD_BAR0_SEG), LCD_BAR0_SEG);
 8001b68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b6c:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8001b70:	2106      	movs	r1, #6
 8001b72:	4628      	mov	r0, r5
 8001b74:	f7fe fc92 	bl	800049c <HAL_LCD_Write>
        b0 = 1;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <BSP_LCD_GLASS_DisplayBar+0xa0>)
        b1 = 1;
 8001b7c:	701a      	strb	r2, [r3, #0]
    position++;
 8001b7e:	3401      	adds	r4, #1
 8001b80:	e7de      	b.n	8001b40 <BSP_LCD_GLASS_DisplayBar+0x10>
        HAL_LCD_Write(&LCDHandle, LCD_BAR1_3_COM, ~(LCD_BAR1_SEG), LCD_BAR1_SEG);
 8001b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b86:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8001b8a:	2104      	movs	r1, #4
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	f7fe fc85 	bl	800049c <HAL_LCD_Write>
        b1 = 1;
 8001b92:	2201      	movs	r2, #1
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <BSP_LCD_GLASS_DisplayBar+0xa4>)
 8001b96:	e7f1      	b.n	8001b7c <BSP_LCD_GLASS_DisplayBar+0x4c>
        HAL_LCD_Write(&LCDHandle, LCD_BAR0_2_COM, ~(LCD_BAR2_SEG), LCD_BAR2_SEG);
 8001b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9c:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 8001ba0:	2106      	movs	r1, #6
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	f7fe fc7a 	bl	800049c <HAL_LCD_Write>
        b2 = 1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	f888 3000 	strb.w	r3, [r8]
        break;
 8001bae:	e7e6      	b.n	8001b7e <BSP_LCD_GLASS_DisplayBar+0x4e>
        HAL_LCD_Write(&LCDHandle, LCD_BAR1_3_COM, ~(LCD_BAR3_SEG), LCD_BAR3_SEG);
 8001bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb4:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 8001bb8:	2104      	movs	r1, #4
 8001bba:	4628      	mov	r0, r5
 8001bbc:	f7fe fc6e 	bl	800049c <HAL_LCD_Write>
        b3 = 1;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	703b      	strb	r3, [r7, #0]
        break;
 8001bc4:	e7db      	b.n	8001b7e <BSP_LCD_GLASS_DisplayBar+0x4e>
 8001bc6:	bf00      	nop
 8001bc8:	20000160 	.word	0x20000160
 8001bcc:	2000008f 	.word	0x2000008f
 8001bd0:	2000008c 	.word	0x2000008c
 8001bd4:	2000008d 	.word	0x2000008d
 8001bd8:	2000008e 	.word	0x2000008e

08001bdc <BSP_LCD_GLASS_DisplayString>:
{
 8001bdc:	b538      	push	{r3, r4, r5, lr}
 8001bde:	4605      	mov	r5, r0
  while ((*ptr != 0) & (position <= LCD_DIGIT_POSITION_6))
 8001be0:	2400      	movs	r4, #0
 8001be2:	5d28      	ldrb	r0, [r5, r4]
 8001be4:	b2e3      	uxtb	r3, r4
 8001be6:	3401      	adds	r4, #1
 8001be8:	b108      	cbz	r0, 8001bee <BSP_LCD_GLASS_DisplayString+0x12>
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d934      	bls.n	8001c58 <BSP_LCD_GLASS_DisplayString+0x7c>
  if(b0 == 1){HAL_LCD_Write(&LCDHandle, LCD_BAR0_2_COM, ~(LCD_BAR0_SEG), LCD_BAR0_SEG);}
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <BSP_LCD_GLASS_DisplayString+0x88>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <BSP_LCD_GLASS_DisplayString+0x2a>
 8001bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bfa:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8001bfe:	2106      	movs	r1, #6
 8001c00:	4819      	ldr	r0, [pc, #100]	; (8001c68 <BSP_LCD_GLASS_DisplayString+0x8c>)
 8001c02:	f7fe fc4b 	bl	800049c <HAL_LCD_Write>
  if(b1 == 1){HAL_LCD_Write(&LCDHandle, LCD_BAR1_3_COM, ~(LCD_BAR1_SEG), LCD_BAR1_SEG);}
 8001c06:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <BSP_LCD_GLASS_DisplayString+0x90>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <BSP_LCD_GLASS_DisplayString+0x42>
 8001c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c12:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8001c16:	2104      	movs	r1, #4
 8001c18:	4813      	ldr	r0, [pc, #76]	; (8001c68 <BSP_LCD_GLASS_DisplayString+0x8c>)
 8001c1a:	f7fe fc3f 	bl	800049c <HAL_LCD_Write>
  if(b2 == 1){HAL_LCD_Write(&LCDHandle, LCD_BAR0_2_COM, ~(LCD_BAR2_SEG), LCD_BAR2_SEG);}
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <BSP_LCD_GLASS_DisplayString+0x94>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d107      	bne.n	8001c36 <BSP_LCD_GLASS_DisplayString+0x5a>
 8001c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c2a:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 8001c2e:	2106      	movs	r1, #6
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <BSP_LCD_GLASS_DisplayString+0x8c>)
 8001c32:	f7fe fc33 	bl	800049c <HAL_LCD_Write>
  if(b3 == 1){HAL_LCD_Write(&LCDHandle, LCD_BAR1_3_COM, ~(LCD_BAR3_SEG), LCD_BAR3_SEG);}
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <BSP_LCD_GLASS_DisplayString+0x98>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d107      	bne.n	8001c4e <BSP_LCD_GLASS_DisplayString+0x72>
 8001c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c42:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 8001c46:	2104      	movs	r1, #4
 8001c48:	4807      	ldr	r0, [pc, #28]	; (8001c68 <BSP_LCD_GLASS_DisplayString+0x8c>)
 8001c4a:	f7fe fc27 	bl	800049c <HAL_LCD_Write>
}
 8001c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <BSP_LCD_GLASS_DisplayString+0x8c>)
 8001c54:	f7fe bc61 	b.w	800051a <HAL_LCD_UpdateDisplayRequest>
    WriteChar(ptr, POINT_OFF, DOUBLEPOINT_OFF, position);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	f7ff fcf8 	bl	8001650 <WriteChar.isra.2>
 8001c60:	e7bf      	b.n	8001be2 <BSP_LCD_GLASS_DisplayString+0x6>
 8001c62:	bf00      	nop
 8001c64:	2000008c 	.word	0x2000008c
 8001c68:	20000160 	.word	0x20000160
 8001c6c:	2000008d 	.word	0x2000008d
 8001c70:	2000008e 	.word	0x2000008e
 8001c74:	2000008f 	.word	0x2000008f

08001c78 <BSP_LCD_GLASS_Clear>:
{
 8001c78:	b508      	push	{r3, lr}
  HAL_LCD_Clear(&LCDHandle);
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <BSP_LCD_GLASS_Clear+0x1c>)
 8001c7c:	f7fe fc71 	bl	8000562 <HAL_LCD_Clear>
  b0 = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <BSP_LCD_GLASS_Clear+0x20>)
 8001c84:	7013      	strb	r3, [r2, #0]
  b1 = 0;
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <BSP_LCD_GLASS_Clear+0x24>)
 8001c88:	7013      	strb	r3, [r2, #0]
  b2 = 0;
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <BSP_LCD_GLASS_Clear+0x28>)
 8001c8c:	7013      	strb	r3, [r2, #0]
  b3 = 0;
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <BSP_LCD_GLASS_Clear+0x2c>)
 8001c90:	7013      	strb	r3, [r2, #0]
 8001c92:	bd08      	pop	{r3, pc}
 8001c94:	20000160 	.word	0x20000160
 8001c98:	2000008c 	.word	0x2000008c
 8001c9c:	2000008d 	.word	0x2000008d
 8001ca0:	2000008e 	.word	0x2000008e
 8001ca4:	2000008f 	.word	0x2000008f

08001ca8 <BSP_LCD_GLASS_Init>:
{
 8001ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8001caa:	2400      	movs	r4, #0
  LCDHandle.Instance              = LCD;
 8001cac:	4d49      	ldr	r5, [pc, #292]	; (8001dd4 <BSP_LCD_GLASS_Init+0x12c>)
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8001cae:	4b4a      	ldr	r3, [pc, #296]	; (8001dd8 <BSP_LCD_GLASS_Init+0x130>)
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8001cb0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8001cb4:	e885 0018 	stmia.w	r5, {r3, r4}
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8001cb8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001cbc:	60ab      	str	r3, [r5, #8]
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8001cbe:	230c      	movs	r3, #12
 8001cc0:	60eb      	str	r3, [r5, #12]
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8001cc2:	2340      	movs	r3, #64	; 0x40
 8001cc4:	612b      	str	r3, [r5, #16]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8001cc6:	622b      	str	r3, [r5, #32]
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8001cc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ccc:	62eb      	str	r3, [r5, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_ENABLE;
 8001cce:	2380      	movs	r3, #128	; 0x80
{
 8001cd0:	b09d      	sub	sp, #116	; 0x74
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001cd2:	4621      	mov	r1, r4
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8001cd4:	61aa      	str	r2, [r5, #24]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001cd6:	a80a      	add	r0, sp, #40	; 0x28
 8001cd8:	2214      	movs	r2, #20
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_ENABLE;
 8001cda:	632b      	str	r3, [r5, #48]	; 0x30
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8001cdc:	616c      	str	r4, [r5, #20]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8001cde:	61ec      	str	r4, [r5, #28]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_0;
 8001ce0:	626c      	str	r4, [r5, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8001ce2:	62ac      	str	r4, [r5, #40]	; 0x28
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001ce4:	f000 fa64 	bl	80021b0 <memset>
  RCC_OscInitTypeDef oscinitstruct = {0};
 8001ce8:	4621      	mov	r1, r4
 8001cea:	2234      	movs	r2, #52	; 0x34
 8001cec:	a80f      	add	r0, sp, #60	; 0x3c
 8001cee:	f000 fa5f 	bl	80021b0 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 8001cf2:	9407      	str	r4, [sp, #28]
 8001cf4:	9408      	str	r4, [sp, #32]
 8001cf6:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	4c38      	ldr	r4, [pc, #224]	; (8001ddc <BSP_LCD_GLASS_Init+0x134>)
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8001cfa:	2701      	movs	r7, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8001cfe:	a80f      	add	r0, sp, #60	; 0x3c
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6263      	str	r3, [r4, #36]	; 0x24
 8001d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8001d08:	9711      	str	r7, [sp, #68]	; 0x44
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	9b01      	ldr	r3, [sp, #4]
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8001d12:	2304      	movs	r3, #4
 8001d14:	930f      	str	r3, [sp, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8001d16:	f7fe fd25 	bl	8000764 <HAL_RCC_OscConfig>
 8001d1a:	4606      	mov	r6, r0
 8001d1c:	b100      	cbz	r0, 8001d20 <BSP_LCD_GLASS_Init+0x78>
 8001d1e:	e7fe      	b.n	8001d1e <BSP_LCD_GLASS_Init+0x76>
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8001d24:	a807      	add	r0, sp, #28
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d26:	9707      	str	r7, [sp, #28]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d28:	9308      	str	r3, [sp, #32]
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8001d2a:	f7ff f993 	bl	8001054 <HAL_RCCEx_PeriphCLKConfig>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	69e3      	ldr	r3, [r4, #28]
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8001d30:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	61e3      	str	r3, [r4, #28]
 8001d38:	69e3      	ldr	r3, [r4, #28]
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8001d3a:	a90a      	add	r1, sp, #40	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	9302      	str	r3, [sp, #8]
 8001d42:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d44:	69e3      	ldr	r3, [r4, #28]
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8001d46:	4826      	ldr	r0, [pc, #152]	; (8001de0 <BSP_LCD_GLASS_Init+0x138>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	61e3      	str	r3, [r4, #28]
 8001d4e:	69e3      	ldr	r3, [r4, #28]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	9303      	str	r3, [sp, #12]
 8001d56:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d58:	69e3      	ldr	r3, [r4, #28]
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	61e3      	str	r3, [r4, #28]
 8001d60:	69e3      	ldr	r3, [r4, #28]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	9304      	str	r3, [sp, #16]
 8001d68:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d6a:	69e3      	ldr	r3, [r4, #28]
 8001d6c:	f043 0308 	orr.w	r3, r3, #8
 8001d70:	61e3      	str	r3, [r4, #28]
 8001d72:	69e3      	ldr	r3, [r4, #28]
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8001d74:	970b      	str	r7, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	9305      	str	r3, [sp, #20]
 8001d7c:	9b05      	ldr	r3, [sp, #20]
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8001d7e:	f248 730e 	movw	r3, #34574	; 0x870e
 8001d82:	930a      	str	r3, [sp, #40]	; 0x28
  gpioinitstruct.Speed      = GPIO_SPEED_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	930d      	str	r3, [sp, #52]	; 0x34
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8001d88:	230b      	movs	r3, #11
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8001d8a:	960c      	str	r6, [sp, #48]	; 0x30
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8001d8c:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8001d8e:	f7fe faa1 	bl	80002d4 <HAL_GPIO_Init>
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8001d92:	f64f 7338 	movw	r3, #65336	; 0xff38
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8001d96:	a90a      	add	r1, sp, #40	; 0x28
 8001d98:	4812      	ldr	r0, [pc, #72]	; (8001de4 <BSP_LCD_GLASS_Init+0x13c>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8001d9a:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8001d9c:	f7fe fa9a 	bl	80002d4 <HAL_GPIO_Init>
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8001da0:	f640 73cf 	movw	r3, #4047	; 0xfcf
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001da4:	a90a      	add	r1, sp, #40	; 0x28
 8001da6:	4810      	ldr	r0, [pc, #64]	; (8001de8 <BSP_LCD_GLASS_Init+0x140>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8001da8:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001daa:	f7fe fa93 	bl	80002d4 <HAL_GPIO_Init>
  HAL_Delay(ms);
 8001dae:	4638      	mov	r0, r7
 8001db0:	f7fe fa1a 	bl	80001e8 <HAL_Delay>
  __HAL_RCC_LCD_CLK_ENABLE();
 8001db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  HAL_LCD_Init(&LCDHandle);
 8001db6:	4628      	mov	r0, r5
  __HAL_RCC_LCD_CLK_ENABLE();
 8001db8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8001dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc4:	9306      	str	r3, [sp, #24]
 8001dc6:	9b06      	ldr	r3, [sp, #24]
  HAL_LCD_Init(&LCDHandle);
 8001dc8:	f7fe fc18 	bl	80005fc <HAL_LCD_Init>
  BSP_LCD_GLASS_Clear();
 8001dcc:	f7ff ff54 	bl	8001c78 <BSP_LCD_GLASS_Clear>
}
 8001dd0:	b01d      	add	sp, #116	; 0x74
 8001dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd4:	20000160 	.word	0x20000160
 8001dd8:	40002400 	.word	0x40002400
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020000 	.word	0x40020000
 8001de4:	40020400 	.word	0x40020400
 8001de8:	40020800 	.word	0x40020800

08001dec <BSP_LCD_GLASS_ScrollSentence>:
  uint8_t str[6] = "";
 8001dec:	2300      	movs	r3, #0
{
 8001dee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	e88d 0006 	stmia.w	sp, {r1, r2}
  bLCDGlass_KeyPressed = 0;
 8001df8:	4a3f      	ldr	r2, [pc, #252]	; (8001ef8 <BSP_LCD_GLASS_ScrollSentence+0x10c>)
  uint8_t str[6] = "";
 8001dfa:	9306      	str	r3, [sp, #24]
 8001dfc:	f8ad 301c 	strh.w	r3, [sp, #28]
  bLCDGlass_KeyPressed = 0;
 8001e00:	7013      	strb	r3, [r2, #0]
  if(ptr == 0)
 8001e02:	4605      	mov	r5, r0
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d06a      	beq.n	8001ede <BSP_LCD_GLASS_ScrollSentence+0xf2>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	1b5c      	subs	r4, r3, r5
  for(ptr1 = ptr, sizestr = 0; *ptr1 != 0; sizestr++, ptr1++);
 8001e0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001e10:	b2e4      	uxtb	r4, r4
 8001e12:	2e00      	cmp	r6, #0
 8001e14:	d1f9      	bne.n	8001e0a <BSP_LCD_GLASS_ScrollSentence+0x1e>
  BSP_LCD_GLASS_DisplayString(str);
 8001e16:	a806      	add	r0, sp, #24
 8001e18:	f7ff fee0 	bl	8001bdc <BSP_LCD_GLASS_DisplayString>
      pb0 = b0;
 8001e1c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001efc <BSP_LCD_GLASS_ScrollSentence+0x110>
      pb1 = b1;
 8001e20:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8001f00 <BSP_LCD_GLASS_ScrollSentence+0x114>
  for (repetition = 0; repetition < nScroll; repetition++)
 8001e24:	9a00      	ldr	r2, [sp, #0]
 8001e26:	b2f3      	uxtb	r3, r6
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d258      	bcs.n	8001ede <BSP_LCD_GLASS_ScrollSentence+0xf2>
 8001e2c:	2700      	movs	r7, #0
      pb2 = b2;
 8001e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8001f04 <BSP_LCD_GLASS_ScrollSentence+0x118>
 8001e32:	e05a      	b.n	8001eea <BSP_LCD_GLASS_ScrollSentence+0xfe>
      *(str) =* (ptr1+((nbrchar)%sizestr));
 8001e34:	fbb3 f2f4 	udiv	r2, r3, r4
 8001e38:	fb04 3212 	mls	r2, r4, r2, r3
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	5caa      	ldrb	r2, [r5, r2]
      *(str+1) =* (ptr1+((nbrchar+1)%sizestr));
 8001e40:	1c59      	adds	r1, r3, #1
      *(str) =* (ptr1+((nbrchar)%sizestr));
 8001e42:	f88d 2018 	strb.w	r2, [sp, #24]
      *(str+1) =* (ptr1+((nbrchar+1)%sizestr));
 8001e46:	fb91 f2f4 	sdiv	r2, r1, r4
 8001e4a:	fb04 1212 	mls	r2, r4, r2, r1
 8001e4e:	5caa      	ldrb	r2, [r5, r2]
      *(str+2) =* (ptr1+((nbrchar+2)%sizestr));
 8001e50:	1c99      	adds	r1, r3, #2
      *(str+1) =* (ptr1+((nbrchar+1)%sizestr));
 8001e52:	f88d 2019 	strb.w	r2, [sp, #25]
      *(str+2) =* (ptr1+((nbrchar+2)%sizestr));
 8001e56:	fb91 f2f4 	sdiv	r2, r1, r4
 8001e5a:	fb04 1212 	mls	r2, r4, r2, r1
 8001e5e:	5caa      	ldrb	r2, [r5, r2]
      *(str+3) =* (ptr1+((nbrchar+3)%sizestr));
 8001e60:	1cd9      	adds	r1, r3, #3
      *(str+2) =* (ptr1+((nbrchar+2)%sizestr));
 8001e62:	f88d 201a 	strb.w	r2, [sp, #26]
      *(str+3) =* (ptr1+((nbrchar+3)%sizestr));
 8001e66:	fb91 f2f4 	sdiv	r2, r1, r4
 8001e6a:	fb04 1212 	mls	r2, r4, r2, r1
 8001e6e:	5caa      	ldrb	r2, [r5, r2]
      *(str+4) =* (ptr1+((nbrchar+4)%sizestr));
 8001e70:	1d19      	adds	r1, r3, #4
      *(str+3) =* (ptr1+((nbrchar+3)%sizestr));
 8001e72:	f88d 201b 	strb.w	r2, [sp, #27]
      *(str+4) =* (ptr1+((nbrchar+4)%sizestr));
 8001e76:	fb91 f2f4 	sdiv	r2, r1, r4
 8001e7a:	fb04 1212 	mls	r2, r4, r2, r1
 8001e7e:	5caa      	ldrb	r2, [r5, r2]
      pb3 = b3;
 8001e80:	f8df b084 	ldr.w	fp, [pc, #132]	; 8001f08 <BSP_LCD_GLASS_ScrollSentence+0x11c>
      *(str+4) =* (ptr1+((nbrchar+4)%sizestr));
 8001e84:	f88d 201c 	strb.w	r2, [sp, #28]
      *(str+5) =* (ptr1+((nbrchar+5)%sizestr));
 8001e88:	1d5a      	adds	r2, r3, #5
 8001e8a:	fb92 f3f4 	sdiv	r3, r2, r4
 8001e8e:	fb04 2313 	mls	r3, r4, r3, r2
 8001e92:	5ceb      	ldrb	r3, [r5, r3]
      pb0 = b0;
 8001e94:	f899 0000 	ldrb.w	r0, [r9]
      pb1 = b1;
 8001e98:	f89a 1000 	ldrb.w	r1, [sl]
      pb2 = b2;
 8001e9c:	f898 2000 	ldrb.w	r2, [r8]
      *(str+5) =* (ptr1+((nbrchar+5)%sizestr));
 8001ea0:	f88d 301d 	strb.w	r3, [sp, #29]
      pb3 = b3;
 8001ea4:	f89b 3000 	ldrb.w	r3, [fp]
      pb0 = b0;
 8001ea8:	9005      	str	r0, [sp, #20]
      pb1 = b1;
 8001eaa:	9104      	str	r1, [sp, #16]
      pb2 = b2;
 8001eac:	9203      	str	r2, [sp, #12]
      pb3 = b3;
 8001eae:	9302      	str	r3, [sp, #8]
      BSP_LCD_GLASS_Clear();
 8001eb0:	f7ff fee2 	bl	8001c78 <BSP_LCD_GLASS_Clear>
      b0 = pb0;
 8001eb4:	9805      	ldr	r0, [sp, #20]
      b2 = pb2;
 8001eb6:	9a03      	ldr	r2, [sp, #12]
      b3 = pb3;
 8001eb8:	9b02      	ldr	r3, [sp, #8]
      b1 = pb1;
 8001eba:	9904      	ldr	r1, [sp, #16]
      b0 = pb0;
 8001ebc:	f889 0000 	strb.w	r0, [r9]
      BSP_LCD_GLASS_DisplayString(str);
 8001ec0:	a806      	add	r0, sp, #24
      b2 = pb2;
 8001ec2:	f888 2000 	strb.w	r2, [r8]
      b3 = pb3;
 8001ec6:	f88b 3000 	strb.w	r3, [fp]
      b1 = pb1;
 8001eca:	f88a 1000 	strb.w	r1, [sl]
      BSP_LCD_GLASS_DisplayString(str);
 8001ece:	f7ff fe85 	bl	8001bdc <BSP_LCD_GLASS_DisplayString>
      if(bLCDGlass_KeyPressed)
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <BSP_LCD_GLASS_ScrollSentence+0x10c>)
 8001ed4:	3701      	adds	r7, #1
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	b122      	cbz	r2, 8001ee4 <BSP_LCD_GLASS_ScrollSentence+0xf8>
        bLCDGlass_KeyPressed = 0;
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
}
 8001ede:	b009      	add	sp, #36	; 0x24
 8001ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  HAL_Delay(ms);
 8001ee4:	9801      	ldr	r0, [sp, #4]
 8001ee6:	f7fe f97f 	bl	80001e8 <HAL_Delay>
 8001eea:	b2fb      	uxtb	r3, r7
    for(nbrchar = 0; nbrchar < (sizestr-5); nbrchar++)
 8001eec:	1f62      	subs	r2, r4, #5
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	dba0      	blt.n	8001e34 <BSP_LCD_GLASS_ScrollSentence+0x48>
 8001ef2:	3601      	adds	r6, #1
 8001ef4:	e796      	b.n	8001e24 <BSP_LCD_GLASS_ScrollSentence+0x38>
 8001ef6:	bf00      	nop
 8001ef8:	20000090 	.word	0x20000090
 8001efc:	2000008c 	.word	0x2000008c
 8001f00:	2000008d 	.word	0x2000008d
 8001f04:	2000008e 	.word	0x2000008e
 8001f08:	2000008f 	.word	0x2000008f

08001f0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_MspInit+0x40>)
{
 8001f0e:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8001f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
 8001f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f1a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f1e:	9201      	str	r2, [sp, #4]
 8001f20:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	6a1a      	ldr	r2, [r3, #32]
 8001f24:	f042 0201 	orr.w	r2, r2, #1
 8001f28:	621a      	str	r2, [r3, #32]
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	f002 0201 	and.w	r2, r2, #1
 8001f30:	9202      	str	r2, [sp, #8]
 8001f32:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	9303      	str	r3, [sp, #12]
 8001f44:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f46:	b004      	add	sp, #16
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_LCD_MspInit>:
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	2214      	movs	r2, #20
{
 8001f52:	b570      	push	{r4, r5, r6, lr}
 8001f54:	4604      	mov	r4, r0
 8001f56:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	eb0d 0002 	add.w	r0, sp, r2
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	f000 f927 	bl	80021b0 <memset>
  if(hlcd->Instance==LCD)
 8001f62:	6822      	ldr	r2, [r4, #0]
 8001f64:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_LCD_MspInit+0xb0>)
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d147      	bne.n	8001ffa <HAL_LCD_MspInit+0xaa>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8001f6a:	f503 3305 	add.w	r3, r3, #136192	; 0x21400
 8001f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2602      	movs	r6, #2
    __HAL_RCC_LCD_CLK_ENABLE();
 8001f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24
 8001f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001f7a:	250b      	movs	r5, #11
    __HAL_RCC_LCD_CLK_ENABLE();
 8001f7c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001f80:	9201      	str	r2, [sp, #4]
 8001f82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f86:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f88:	f042 0204 	orr.w	r2, r2, #4
 8001f8c:	61da      	str	r2, [r3, #28]
 8001f8e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f90:	481c      	ldr	r0, [pc, #112]	; (8002004 <HAL_LCD_MspInit+0xb4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	f002 0204 	and.w	r2, r2, #4
 8001f96:	9202      	str	r2, [sp, #8]
 8001f98:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	69da      	ldr	r2, [r3, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	61da      	str	r2, [r3, #28]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	f002 0201 	and.w	r2, r2, #1
 8001faa:	9203      	str	r2, [sp, #12]
 8001fac:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	f042 0202 	orr.w	r2, r2, #2
 8001fb4:	61da      	str	r2, [r3, #28]
 8001fb6:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	9304      	str	r3, [sp, #16]
 8001fc0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001fc2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001fc6:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001fc8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fca:	f7fe f983 	bl	80002d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8 
 8001fce:	f248 730e 	movw	r3, #34574	; 0x870e
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd2:	a905      	add	r1, sp, #20
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <HAL_LCD_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8 
 8001fd6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001fde:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe0:	f7fe f978 	bl	80002d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8001fe4:	f64f 7338 	movw	r3, #65336	; 0xff38
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	a905      	add	r1, sp, #20
 8001fea:	4808      	ldr	r0, [pc, #32]	; (800200c <HAL_LCD_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8001fec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001ff4:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff6:	f7fe f96d 	bl	80002d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8001ffa:	b00a      	add	sp, #40	; 0x28
 8001ffc:	bd70      	pop	{r4, r5, r6, pc}
 8001ffe:	bf00      	nop
 8002000:	40002400 	.word	0x40002400
 8002004:	40020800 	.word	0x40020800
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400

08002010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002010:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 8002012:	6803      	ldr	r3, [r0, #0]
 8002014:	4a15      	ldr	r2, [pc, #84]	; (800206c <HAL_TIM_Base_MspInit+0x5c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d114      	bne.n	8002044 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_TIM_Base_MspInit+0x60>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800201c:	202b      	movs	r0, #43	; 0x2b
    __HAL_RCC_TIM6_CLK_ENABLE();
 800201e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002020:	f042 0210 	orr.w	r2, r2, #16
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800202a:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002034:	f7fe f8f8 	bl	8000228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002038:	202b      	movs	r0, #43	; 0x2b
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800203a:	f7fe f929 	bl	8000290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800203e:	b003      	add	sp, #12
 8002040:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 8002044:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <HAL_TIM_Base_MspInit+0x64>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d1f9      	bne.n	800203e <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_TIM_Base_MspInit+0x60>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800204c:	202c      	movs	r0, #44	; 0x2c
    __HAL_RCC_TIM7_CLK_ENABLE();
 800204e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002050:	f042 0220 	orr.w	r2, r2, #32
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800205a:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002064:	f7fe f8e0 	bl	8000228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002068:	202c      	movs	r0, #44	; 0x2c
 800206a:	e7e6      	b.n	800203a <HAL_TIM_Base_MspInit+0x2a>
 800206c:	40001000 	.word	0x40001000
 8002070:	40023800 	.word	0x40023800
 8002074:	40001400 	.word	0x40001400

08002078 <NMI_Handler>:
 8002078:	4770      	bx	lr

0800207a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207a:	e7fe      	b.n	800207a <HardFault_Handler>

0800207c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800207c:	e7fe      	b.n	800207c <MemManage_Handler>

0800207e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207e:	e7fe      	b.n	800207e <BusFault_Handler>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	e7fe      	b.n	8002080 <UsageFault_Handler>

08002082 <SVC_Handler>:
 8002082:	4770      	bx	lr

08002084 <DebugMon_Handler>:
 8002084:	4770      	bx	lr

08002086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002086:	4770      	bx	lr

08002088 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002088:	f7fe b8a0 	b.w	80001cc <HAL_IncTick>

0800208c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800208c:	2001      	movs	r0, #1
 800208e:	f7fe b9f9 	b.w	8000484 <HAL_GPIO_EXTI_IRQHandler>

08002092 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002092:	2002      	movs	r0, #2
 8002094:	f7fe b9f6 	b.w	8000484 <HAL_GPIO_EXTI_IRQHandler>

08002098 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002098:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800209a:	2040      	movs	r0, #64	; 0x40
 800209c:	f7fe f9f2 	bl	8000484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80020a4:	2080      	movs	r0, #128	; 0x80
 80020a6:	f7fe b9ed 	b.w	8000484 <HAL_GPIO_EXTI_IRQHandler>
	...

080020ac <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020ac:	4801      	ldr	r0, [pc, #4]	; (80020b4 <TIM6_IRQHandler+0x8>)
 80020ae:	f7ff b8ea 	b.w	8001286 <HAL_TIM_IRQHandler>
 80020b2:	bf00      	nop
 80020b4:	200000a4 	.word	0x200000a4

080020b8 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020b8:	4801      	ldr	r0, [pc, #4]	; (80020c0 <TIM7_IRQHandler+0x8>)
 80020ba:	f7ff b8e4 	b.w	8001286 <HAL_TIM_IRQHandler>
 80020be:	bf00      	nop
 80020c0:	20000118 	.word	0x20000118

080020c4 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <SystemInit+0x3c>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020cc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	4a0c      	ldr	r2, [pc, #48]	; (8002104 <SystemInit+0x40>)
 80020d2:	400a      	ands	r2, r1
 80020d4:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80020dc:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 80020e0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020e8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80020f0:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80020f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020fa:	4b03      	ldr	r3, [pc, #12]	; (8002108 <SystemInit+0x44>)
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	4770      	bx	lr
 8002100:	40023800 	.word	0x40023800
 8002104:	88ffc00c 	.word	0x88ffc00c
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800210c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800210e:	e003      	b.n	8002118 <LoopCopyDataInit>

08002110 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002112:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002114:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002116:	3104      	adds	r1, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002118:	480a      	ldr	r0, [pc, #40]	; (8002144 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800211c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800211e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002120:	d3f6      	bcc.n	8002110 <CopyDataInit>
  ldr r2, =_sbss
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002124:	e002      	b.n	800212c <LoopFillZerobss>

08002126 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002128:	f842 3b04 	str.w	r3, [r2], #4

0800212c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800212e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002130:	d3f9      	bcc.n	8002126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002132:	f7ff ffc7 	bl	80020c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002136:	f000 f80f 	bl	8002158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800213a:	f7ff f9ab 	bl	8001494 <main>
  bx lr
 800213e:	4770      	bx	lr
  ldr r3, =_sidata
 8002140:	08002368 	.word	0x08002368
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002148:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 800214c:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8002150:	200001a0 	.word	0x200001a0

08002154 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC1_IRQHandler>
	...

08002158 <__libc_init_array>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	2500      	movs	r5, #0
 800215c:	4e0c      	ldr	r6, [pc, #48]	; (8002190 <__libc_init_array+0x38>)
 800215e:	4c0d      	ldr	r4, [pc, #52]	; (8002194 <__libc_init_array+0x3c>)
 8002160:	1ba4      	subs	r4, r4, r6
 8002162:	10a4      	asrs	r4, r4, #2
 8002164:	42a5      	cmp	r5, r4
 8002166:	d109      	bne.n	800217c <__libc_init_array+0x24>
 8002168:	f000 f8a8 	bl	80022bc <_init>
 800216c:	2500      	movs	r5, #0
 800216e:	4e0a      	ldr	r6, [pc, #40]	; (8002198 <__libc_init_array+0x40>)
 8002170:	4c0a      	ldr	r4, [pc, #40]	; (800219c <__libc_init_array+0x44>)
 8002172:	1ba4      	subs	r4, r4, r6
 8002174:	10a4      	asrs	r4, r4, #2
 8002176:	42a5      	cmp	r5, r4
 8002178:	d105      	bne.n	8002186 <__libc_init_array+0x2e>
 800217a:	bd70      	pop	{r4, r5, r6, pc}
 800217c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002180:	4798      	blx	r3
 8002182:	3501      	adds	r5, #1
 8002184:	e7ee      	b.n	8002164 <__libc_init_array+0xc>
 8002186:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800218a:	4798      	blx	r3
 800218c:	3501      	adds	r5, #1
 800218e:	e7f2      	b.n	8002176 <__libc_init_array+0x1e>
 8002190:	08002360 	.word	0x08002360
 8002194:	08002360 	.word	0x08002360
 8002198:	08002360 	.word	0x08002360
 800219c:	08002364 	.word	0x08002364

080021a0 <malloc>:
 80021a0:	4b02      	ldr	r3, [pc, #8]	; (80021ac <malloc+0xc>)
 80021a2:	4601      	mov	r1, r0
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	f000 b80b 	b.w	80021c0 <_malloc_r>
 80021aa:	bf00      	nop
 80021ac:	20000004 	.word	0x20000004

080021b0 <memset>:
 80021b0:	4603      	mov	r3, r0
 80021b2:	4402      	add	r2, r0
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d100      	bne.n	80021ba <memset+0xa>
 80021b8:	4770      	bx	lr
 80021ba:	f803 1b01 	strb.w	r1, [r3], #1
 80021be:	e7f9      	b.n	80021b4 <memset+0x4>

080021c0 <_malloc_r>:
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	1ccd      	adds	r5, r1, #3
 80021c4:	f025 0503 	bic.w	r5, r5, #3
 80021c8:	3508      	adds	r5, #8
 80021ca:	2d0c      	cmp	r5, #12
 80021cc:	bf38      	it	cc
 80021ce:	250c      	movcc	r5, #12
 80021d0:	2d00      	cmp	r5, #0
 80021d2:	4606      	mov	r6, r0
 80021d4:	db01      	blt.n	80021da <_malloc_r+0x1a>
 80021d6:	42a9      	cmp	r1, r5
 80021d8:	d903      	bls.n	80021e2 <_malloc_r+0x22>
 80021da:	230c      	movs	r3, #12
 80021dc:	6033      	str	r3, [r6, #0]
 80021de:	2000      	movs	r0, #0
 80021e0:	bd70      	pop	{r4, r5, r6, pc}
 80021e2:	f000 f85b 	bl	800229c <__malloc_lock>
 80021e6:	4a23      	ldr	r2, [pc, #140]	; (8002274 <_malloc_r+0xb4>)
 80021e8:	6814      	ldr	r4, [r2, #0]
 80021ea:	4621      	mov	r1, r4
 80021ec:	b991      	cbnz	r1, 8002214 <_malloc_r+0x54>
 80021ee:	4c22      	ldr	r4, [pc, #136]	; (8002278 <_malloc_r+0xb8>)
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	b91b      	cbnz	r3, 80021fc <_malloc_r+0x3c>
 80021f4:	4630      	mov	r0, r6
 80021f6:	f000 f841 	bl	800227c <_sbrk_r>
 80021fa:	6020      	str	r0, [r4, #0]
 80021fc:	4629      	mov	r1, r5
 80021fe:	4630      	mov	r0, r6
 8002200:	f000 f83c 	bl	800227c <_sbrk_r>
 8002204:	1c43      	adds	r3, r0, #1
 8002206:	d126      	bne.n	8002256 <_malloc_r+0x96>
 8002208:	230c      	movs	r3, #12
 800220a:	4630      	mov	r0, r6
 800220c:	6033      	str	r3, [r6, #0]
 800220e:	f000 f846 	bl	800229e <__malloc_unlock>
 8002212:	e7e4      	b.n	80021de <_malloc_r+0x1e>
 8002214:	680b      	ldr	r3, [r1, #0]
 8002216:	1b5b      	subs	r3, r3, r5
 8002218:	d41a      	bmi.n	8002250 <_malloc_r+0x90>
 800221a:	2b0b      	cmp	r3, #11
 800221c:	d90f      	bls.n	800223e <_malloc_r+0x7e>
 800221e:	600b      	str	r3, [r1, #0]
 8002220:	18cc      	adds	r4, r1, r3
 8002222:	50cd      	str	r5, [r1, r3]
 8002224:	4630      	mov	r0, r6
 8002226:	f000 f83a 	bl	800229e <__malloc_unlock>
 800222a:	f104 000b 	add.w	r0, r4, #11
 800222e:	1d23      	adds	r3, r4, #4
 8002230:	f020 0007 	bic.w	r0, r0, #7
 8002234:	1ac3      	subs	r3, r0, r3
 8002236:	d01b      	beq.n	8002270 <_malloc_r+0xb0>
 8002238:	425a      	negs	r2, r3
 800223a:	50e2      	str	r2, [r4, r3]
 800223c:	bd70      	pop	{r4, r5, r6, pc}
 800223e:	428c      	cmp	r4, r1
 8002240:	bf0b      	itete	eq
 8002242:	6863      	ldreq	r3, [r4, #4]
 8002244:	684b      	ldrne	r3, [r1, #4]
 8002246:	6013      	streq	r3, [r2, #0]
 8002248:	6063      	strne	r3, [r4, #4]
 800224a:	bf18      	it	ne
 800224c:	460c      	movne	r4, r1
 800224e:	e7e9      	b.n	8002224 <_malloc_r+0x64>
 8002250:	460c      	mov	r4, r1
 8002252:	6849      	ldr	r1, [r1, #4]
 8002254:	e7ca      	b.n	80021ec <_malloc_r+0x2c>
 8002256:	1cc4      	adds	r4, r0, #3
 8002258:	f024 0403 	bic.w	r4, r4, #3
 800225c:	42a0      	cmp	r0, r4
 800225e:	d005      	beq.n	800226c <_malloc_r+0xac>
 8002260:	1a21      	subs	r1, r4, r0
 8002262:	4630      	mov	r0, r6
 8002264:	f000 f80a 	bl	800227c <_sbrk_r>
 8002268:	3001      	adds	r0, #1
 800226a:	d0cd      	beq.n	8002208 <_malloc_r+0x48>
 800226c:	6025      	str	r5, [r4, #0]
 800226e:	e7d9      	b.n	8002224 <_malloc_r+0x64>
 8002270:	bd70      	pop	{r4, r5, r6, pc}
 8002272:	bf00      	nop
 8002274:	20000094 	.word	0x20000094
 8002278:	20000098 	.word	0x20000098

0800227c <_sbrk_r>:
 800227c:	b538      	push	{r3, r4, r5, lr}
 800227e:	2300      	movs	r3, #0
 8002280:	4c05      	ldr	r4, [pc, #20]	; (8002298 <_sbrk_r+0x1c>)
 8002282:	4605      	mov	r5, r0
 8002284:	4608      	mov	r0, r1
 8002286:	6023      	str	r3, [r4, #0]
 8002288:	f000 f80a 	bl	80022a0 <_sbrk>
 800228c:	1c43      	adds	r3, r0, #1
 800228e:	d102      	bne.n	8002296 <_sbrk_r+0x1a>
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	b103      	cbz	r3, 8002296 <_sbrk_r+0x1a>
 8002294:	602b      	str	r3, [r5, #0]
 8002296:	bd38      	pop	{r3, r4, r5, pc}
 8002298:	2000019c 	.word	0x2000019c

0800229c <__malloc_lock>:
 800229c:	4770      	bx	lr

0800229e <__malloc_unlock>:
 800229e:	4770      	bx	lr

080022a0 <_sbrk>:
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <_sbrk+0x14>)
 80022a2:	4602      	mov	r2, r0
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	b909      	cbnz	r1, 80022ac <_sbrk+0xc>
 80022a8:	4903      	ldr	r1, [pc, #12]	; (80022b8 <_sbrk+0x18>)
 80022aa:	6019      	str	r1, [r3, #0]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	4402      	add	r2, r0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	4770      	bx	lr
 80022b4:	2000009c 	.word	0x2000009c
 80022b8:	200001a0 	.word	0x200001a0

080022bc <_init>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	bf00      	nop
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr

080022c8 <_fini>:
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	bf00      	nop
 80022cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ce:	bc08      	pop	{r3}
 80022d0:	469e      	mov	lr, r3
 80022d2:	4770      	bx	lr
